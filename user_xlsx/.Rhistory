rv$selectedPost
mongo(collection="posts", db=db, url = url)$find('{"postID":1449245677}')
mongo(collection="posts", db=db, url = url)$find('{"postID":1445138342}')
mongo(collection="posts", db=db, url = url)$find()
mongo(collection="posts", db=db, url = url)$find('{"postID":1449245677}')
mongo(collection="posts", db=db, url = url)$find('{"postID":as.integer(1449245677)}')
mongo(collection="posts", db=db, url = url)$find('{"postID":"1449245677"}')
c
shiny::runApp('~/Documents/shiny/AppRumen')
field_postID
mongo(collection="comments", db=db, url = url)$find('{"postID":1445138341}')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
Q
c
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
new_row
new_row
shiny::runApp()
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
new_row
new_row
new_row <- collect_inputs(fields_post) %>% rbind() %>% data.frame()
new_row
new_row[, c(2:7,9)] <- sapply(new_row[, c(2:7,9)], as.numeric)
new_row
rv$timestamp_comment <- 0
new_row <- collect_inputs(fields_post) %>% rbind() %>% data.frame()
new_row[, c(2:9)] <- sapply(new_row[, c(2:9)], as.numeric)
new_row
new_row <- collect_inputs(fields_post) %>% rbind() %>% data.frame()
new_row
sapply(new_row[, c(2:9)], as.numeric)
new_row[, c(2:9)]
as.numeric(new_row[, c(2)])
as.numeric(new_row[2])
as.numeric(new_row[,2])
new_row[,2]
new_row[[edits]]
new_row[["edits"]]
as.numeric(new_row[["edits"]])
new_row <- collect_inputs(fields_post)
ner_row
new_row
new_row %>% as.numeric()
new_row[,2]
new_row[2]
new_row[3]
new_row$edits
collect_inputs <- function(fields) {
lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
})
}
collect_inputs(fields_post)
collect_inputs(fields_post) %>% data.frame()
collect_inputs(fields_post) %>% unlist %>% data.frame()
collect_inputs(fields_post) %>% unlist %>% rbind() %>% data.frame()
new_row <- collect_inputs(fields_post) %>% unlist %>% rbind() %>% data.frame()
new_row[, c(2:9)] <- sapply(new_row[, c(2:9)], as.numeric)
new_row
new_row <- collect_inputs(fields_post) %>% unlist %>% rbind() %>% data.frame()
lapply(new_row[, c(2:9)], as.numeric)
new_row[, c(2:9)] <- sapply(new_row[, c(2:9)], as.numeric)
new_row
collect_inputs(fields_post)
new_row <- row_inputs(fields_post)
new_row
row_inputs(fields_post)
row_inputs <- function(fields) {
new_row <- lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
})  %>% rbind() %>% data.frame()
colnames(new_row) <- colnames(fields)
rownames(new_row) <- NULL
return(new_row)
}
row_inputs(fields_post)
row_inputs <- function(fields) {
new_row <- lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
})  %>% unlist() %>% rbind() %>% data.frame()
colnames(new_row) <- colnames(fields)
rownames(new_row) <- NULL
return(new_row)
}
row_inputs(fields_post)
row_inputs(fields_post) %>% dim()
row_inputs(fields_post) %>% colnames()
row_inputs <- function(fields) {
browser()
new_row <- lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
})  %>% unlist() %>% rbind() %>% data.frame()
colnames(new_row) <- colnames(fields)
rownames(new_row) <- NULL
return(new_row)
}
row_inputs(fields_post)
new_row
row_inputs(fields_post)
colnames(new_row) <- fields
new_row
colnames(new_row)
colnames(new_row) <- fields
colnames(new_row)
rownames(new_row) <- NULL
row_inputs <- function(fields) {
browser()
new_row <- lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
})  %>% unlist() %>% rbind() %>% data.frame()
# rownames(new_row) <- NULL
colnames(new_row) <- fields
return(new_row)
}
row_inputs(fields_post)
new_row
rownames(new_row) <- NULL
new_row
new_row <- row_inputs(fields_post)
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
list(a=1,b=2) %>% data.frame()
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
update_comments
new_row
row_inputs(fields_comment)
# Gather all the form inputs
row_inputs <- function(fields) {
browser()
new_row <- lapply(fields, function(x) {
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
}) %>% data.frame()
rownames(new_row) <- NULL
colnames(new_row) <- fields
return(new_row)
}
row_inputs(fields_comment)
# Gather all the form inputs
row_inputs <- function(fields) {
browser()
new_row <- lapply(fields, function(x) {
browser()
if (!is.null(input[[x]])) {
x = input[[x]]
} else {
x = rv[[x]]
}
}) %>% data.frame()
rownames(new_row) <- NULL
colnames(new_row) <- fields
return(new_row)
}
row_inputs(fields_comment)
input$timestamp2
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
update_comments
postID
update_comments
update_comments <- paste0('{"$set":{', '"current_comments":', (tmp_post$current_comments  + 1),
', "cumulative_comments":', (tmp_post$cumulative_comments + 1),
', "timestamp_comment":', get_time_epoch(),
', "average_interest":', average_interest, '}}')
postID <- paste0('{"postID":', tmp_post$postID, '}')
mongo(collection="posts", db=db, url = url)$update(postID, update=update_comments)
shiny::runApp('~/Documents/shiny/AppRumen')
tmp_post$current_comments
Q
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
Q
c
shiny::runApp('~/Documents/shiny/AppRumen')
fields
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
Q
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
row_inputs(fields_comment)
fields_comment
input$fields_comment[1]
for(1:10) {input$fields_comment[i]}
for(i in 1:10) { input$fields_comment[i]}
for(i in 1:10) { print(input$fields_comment[i] ) }
for(i in 1:10) { print(input$fields_comment[i]) }
Q
shiny::runApp('~/Documents/shiny/AppRumen')
fields_comment
for(i in 1:10) { print(input[[fields_comment[i]]])}
input[[fields_comment[1]]]
input[[fields_comment[2]]
]
input[[fields_comment[3]]]
input[[fields_comment[4]]]
input[[fields_comment[5]]]
input[[fields_comment[6]]]
input[[fields_comment[7]]]
input[[fields_comment[8]]]
input[[fields_comment[9]]]
input[[fields_comment[10]]]
rv[[fields_comment[1]]]
rv[[fields_comment[2]]]
rv[[fields_comment[3]]]
rv[[fields_comment[4]]]
fields_comment
rv$postID
rv$post_name
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
dim(NULL)[1]
dim(NULL)[1]>0
if (dim(NULL)[1]>0) {print("a")}
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
row_inputs(fields_post)
fields_post
input$fileds_post[1]
input$fileds_post[2]
input$fileds_post[3]
input$fileds_post[4]
input$fileds_post[5]
input$fileds_post[6]
input[[fileds_post[6]]]
input[[fields_post[6]]]
input[[fields_post[1]]]
input[[fields_post[2]]]
input[[fields_post[3]]]
input[[fields_post[4]]
]
input[[fields_post[5]]]
shiny::runApp('~/Documents/shiny/AppRumen')
new_row
Q
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
user_session$info$emailAddress
rv$selectedPost$email_address
user_session$info$emailAddress
user_session$info$token_valid
user_session$info
rv$email_address
shiny::runApp('~/Documents/shiny/AppRumen')
user_session_info
user_session_info$emailAddress
user_session$info <- gs_user()
updateTextInput(session, "user_name", value = user_session$info$displayName)
updateTextInput(session, "email_address", value =  user_session$info$emailAddress)
updateTextInput(session, "comment_user_name", value = user_session$info$displayName)
updateTextInput(session, "comment_email_address", value =  user_session$info$emailAddress)
user_session$info$displayName
user_session$info$emailAddress
user_session$info$token_valid
update_edit
field_postID
mongo(collection="posts", db=db, url = url)$find(field_postID)
mongo(collection="posts", db=db, url = url)$find(field_postID)
update
update_edit
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":', paste(get_time_human()),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
update_edit
get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, ' }}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
field_postID <- paste0('{"postID":', tmp_post$postID, '}')
mongo(collection="comments", db=db, url = url)$remove(field_postID, multiple = TRUE)
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
update_edit
field_postID
update_edit <- paste0('{"$set":{',
'"timestamp":', get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
update_edit
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
field_postID
mongo(collection="posts", db=db, url = url)$find(field_postID)
field_postID
update_edit
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_comments <- paste0('{"$set":{', '"current_comments":', (tmp_post$current_comments  + 1),
', "cumulative_comments":', (tmp_post$cumulative_comments + 1),
', "timestamp_comment":', get_time_epoch(),
', "average_interest":', average_interest, '}}')
update_comments <- paste0('{"$set":{', '"current_comments":', (tmp_post$current_comments  + 1),
', "cumulative_comments":', (tmp_post$cumulative_comments + 1),
', "timestamp_comment":', get_time_epoch(),
', "average_interest":', 3, '}}')
update_comments
update_edit
update_edit <- paste0('{"$set":{',
' "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
get_time_human()
mongo(collection="posts", db=db, url = url)$find(field_postID)[1]
update_edit <- paste0('{"$set":{',
'"timestamp":', "somenumber",
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":', 1,
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
as.numeric(get_time_human())
c(get_time_human())
get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
get_time_human() %>% unlist()
get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', 0, # get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
mongo(collection="posts", db=db, url = url)$find(field_postID)[1]
update_edit <- paste0('{"$set":{',
'"timestamp":', "0" , # get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
mongo(collection="posts", db=db, url = url)$find(field_postID)[1]
timestamp <- get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', timestamp,
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
timestamp <- get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', paste(timestamp),
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
timestamp <- get_time_human()
update_edit <- paste0('{"$set":{',
'"timestamp":', "paste(timestamp)",
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":', "somenumber",
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":', "00",
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0, '}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
get_time_human() %>% is.numeric.Date()
get_time_human() %>% is.numeric.numeric()
get_time_human() %>% is.numeric()
timestamp <- get_time_human()
View(tmp_post)
timestamp()
##------ Fri Dec  4 16:35:13 2015 ------##
timestamp
View(tmp_post)
new_row <- row_inputs(fields_post)
rv$postID <- tmp_post$postID
rv$timestamp <- get_time_human()
rv$timestamp_comment <- 0
new_row <- row_inputs(fields_post)
new_row
input$post
input$post_ed
update_edit <- paste0('{"$set":{',
' "edits":', as.integer(tmp_post$edits + 1),
'"timestamp":', get_time_human(),
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
' "edits":', as.integer(tmp_post$edits + 1),
'"post":', input$post_ed,
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
input$post_ed
update_edit
update_comments
update_edit <- paste0('{"$set":{',
' "edits":', as.integer(tmp_post$edits + 1),
'"post":', '"',input$post_ed, '"',
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_comments
update_edit
update_edit <- paste0('{"$set":{',
' "edits":', as.integer(tmp_post$edits + 1),
', "post":', '"',input$post_ed, '"',
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":',get_time_human(),
', "edits":', as.integer(tmp_post$edits + 1),
', "post":', '"',input$post_ed, '"',
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
update_edit <- paste0('{"$set":{',
'"timestamp":','"', get_time_human(), '"',
', "edits":', as.integer(tmp_post$edits + 1),
', "post":', '"',input$post_ed, '"',
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
mongo(collection="posts", db=db, url = url)$find(field_postID)
update_edit <- paste0('{"$set":{',
'"timestamp":','"', get_time_human(), '"',
', "post_name":',  '"', input$post_name_ed, '"',
', "post_category":',  '"', input$post_category_ed, '"',
', "edits":', as.integer(tmp_post$edits + 1),
', "current_views":', 0,
', "current_comments":', 0,
', "post":', '"',input$post_ed, '"',
'}}')
mongo(collection="posts", db=db, url = url)$update(field_postID, update=update_edit)
mongo(collection="posts", db=db, url = url)$find(field_postID)
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runGitHub('ShinyMongo', 'comsysto', subdir='ShinyApp')
require(devtools)
install_github('poirot', 'ramnathv')
install_github('slidify', 'ramnathv', ref = 'dev')
install_github('slidifyLibraries', 'ramnathv')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
Q
shiny::runApp('~/Documents/shiny/AppRumen')
filed_userID
field_userID
Q
shiny::runApp('~/Documents/shiny/AppRumen')
rv$selectedPost
rv$selectedUser
c
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
shiny::runApp('~/Documents/shiny/AppRumen')
field_userID
field_userID
rv$selectedUser
mongo_posts$find(field_userID)
mongo_posts$find()
shiny::runApp('~/Documents/shiny/AppRumen')
rv$selectedUser
tmp_user$comment_user_name
