new_row <- post_data() %>% matrix(nrow = 1) %>% c() %>% data.frame()
new_row <- post_data() %>% matrix(nrow = 1) %>% c()
new_row
post_data()
post_data() %>% data.frame()
c(post_data()) %>% data.frame()
unlist(post_data()) %>% data.frame()
post_data() %>% data.frame()
unlist(post_data()) %>% data.frame() %>% t()
a <- unlist(post_data()) %>% data.frame() %>% t()
a
cbind(post_data()) %>% data.frame()
rbind(post_data()) %>% data.frame()
new_row <- data1[1,] %>% rbind() %>% as.data.frame()
colnames(new_row) <- colnames(data1)
shiny::runApp('Documents/shiny/AppRumen')
new_row
shiny::runApp('Documents/shiny/AppRumen')
Q
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
new_row
input$timestamp_comment
input$average_interest
new_row
input$timestamp
input$timestamp_comment
updateTextInput(session, "timestamp_comment", value = get_time_human())
input$timestamp_comment
get_time_human()
Q
shiny::runApp('Documents/shiny/AppRumen')
input$timestamp_comment
updateTextInput(session, "timestamp_comment", value = get_time_human())
input$timestamp_comment
input$timestamp
updateTextInput(session, "timestamp", value = get_time_human())
input$timestamp
input$average_interest
updateTextInput(session,"average_interest", value="NA")
input$average_interest
updateTextInput(session,"average_interest", value="abc")
input$average_interest
updateTextInput(session, "timestamp", value = get_time_human())
input$timestamp
input$timestamp_comment
shiny::runApp('Documents/shiny/AppRumen')
View(view_posts)
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
mongo(collection="comments", db=db, url = url)$find(field_postID)
host <- "ds061954.mongolab.com:61954"
username <- "user1"
password <- "user1"
db <- "app_rumen"
## Connect to mongodb from a mongolab location
url <- paste0("mongodb://",username,":",password,"@", host, "/",db)
data1 <- mongo(collection="posts", db=db, url = url)$find()
data1 <- mongo(collection="posts", db=db, url = url)
data1$update('{"postID":1445138342}', update='{"$set":{ "current_views": 6 }}' )
data1$find('{"postID":1445138342}')
shiny::runApp('Documents/shiny/AppRumen')
host <- "ds061954.mongolab.com:61954"
username <- "user1"
password <- "user1"
db <- "app_rumen"
## Connect to mongodb from a mongolab location
url <- paste0("mongodb://",username,":",password,"@", host, "/",db)
data1 <- mongo(collection="posts", db=db, url = url)$find()
data0 <- mongo(db=db, url = url)
data0
data0$find()
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
filter_category
input$filterCategory
filter_category <- paste0('{"post_category":', ["Milk", "Forage", "Labor",  "Social"],'}')
filter_category <- paste0('{"post_category":', '["Milk", "Forage", "Labor",  "Social"]','}')
filter_category <- paste0('{"post_category":', ["Milk", "Forage", "Labor",  "Social"],'}')
filter_category
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{$or: [{"post_category":',"Milk",'}, {"post_category":', "Forage",'}]' ,'}')
filter_category
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{"post_category":',"Milk",'}')
table_posts_copy <-  mongo_posts$find(filter_category)
mongo_post$find()
mongo_posts$find()
filter_category <- paste0('{"post_category":','"',"Milk",'"','}')
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{$or: [{"post_category":','"',"Milk",'"',
'}, {"post_category":', '"',"Forage",'"','}]' ,'}')
filter_category
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{"post_category":','"',"Milk",'"','}')
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category
filter_category <- paste0('{ $or: [ {"post_category":','"',"Milk",'"',
'}, {"post_category":', '"',"Forage",'"','} ] ' ,'}')
table_posts_copy <-  mongo_posts$find(filter_category)
mongo_posts$index(add = "post_category")
table_posts_copy <-  mongo_posts$find(filter_category)
mongo_posts$index(add = "post_category_index")
mongo_posts$index(add = "post_category":1)
mongo_posts$index("post_category":1)
mongo_posts$index('{"post_category":1}')
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{ $or: [ {"post_category":','"',"Milk",'"',
'}, {"post_category":', '"',"Forage",'"','} ] ' ,'}')
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{ $or: [ {"post_category":','"',"Milk",'"','} ] ' ,'}')
filter_category
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{ "$or"',': [ {"post_category":','"',"Milk",'"','} ] ' ,'}')
table_posts_copy <-  mongo_posts$find(filter_category)
filter_category <- paste0('{ "$or":','[ {"post_category":','"',"Milk",'"',
'}, {"post_category":', '"',"Forage",'"','} ] ' ,'}')
table_posts_copy <-  mongo_posts$find(filter_category)
length(input$filterCategory)
filter_category <- paste0('{ "$or":[')
for (i in 1:length(input$filterCategory)) {
if (i>1 & i<length(input$filterCategory)) {
filter_category <-  paste0(filter_category,',')
}
filter_category <-  paste0(filter_category, '{"post_category":','"',input$filterCategory[i],'"}')
}
filter_category <-  paste0(filter_category, ']}')
filter_category
rv$filter_category <- paste0('{ "$or":[')
for (i in 1:length(input$filterCategory)) {
if (i>1 & i<length(input$filterCategory)) {
rv$filter_category <-  paste0(rv$filter_category,',')
}
rv$filter_category <-  paste0(rv$filter_category, '{"post_category":','"',input$filterCategory[i],'"}')
}
rv$filter_category <-  paste0(rv$filter_category, ']}')
filter_category
rv$filter_category
shiny::runApp('Documents/shiny/AppRumen')
rv$filter_category
rv$filter_category
rv$filter_category
shiny::runApp('Documents/shiny/AppRumen')
filter_category
filter_category
filter_category <-  paste0(filter_category, ']}')
filter_category
filter_category <- paste0('{ "$or":[')
for (i in 1:length(input$filterCategory)) {
if (i>1 & i<length(input$filterCategory)) {
filter_category <-  paste0(filter_category,',')
}
filter_category <-  paste0(filter_category, '{"post_category":','"',input$filterCategory[i],'"}')
}
filter_category <-  paste0(filter_category, ']}')
filter_category
Q
shiny::runApp('Documents/shiny/AppRumen')
shiny::runApp('Documents/shiny/AppRumen')
update_comments
field_postID
mongo_posts$find(field_postID)
mongo_posts$find(field_postID)
mongo_posts$find(field_postID)
mongo_posts$find(field_postID)
mongo_posts$update(field_postID
)
mongo_posts$update(field_postID)
mongo_posts$find(field_postID)
rv$back_to_selected_post
rv$comment_reset
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
options(error=recover)
runApp()
runApp()
1
1
options(error=NULL)
runApp()
runApp()
runApp()
echo=FALSE
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mongo_posts$index('{"post_category":1}')
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
tmp_user
dim(tmp_user)
dim(tmp_userp[1,])
dim(tmp_user[1,])
dim(tmp_user[1,,drop=FALSE])
tmp_user[1,,drop=FALSE]
tmp_user[1,]
tmp_user <- rv$selectedUser[1,]
tmp_user[1,]
Q
runApp()
rv$selectedUser
field_userID
update_views
update_views <- paste0('{"profile_views":', as.integer(tmp_user$profile_views + 1), '}')
update_views
mongo_users$find(field_userID, update=update_views)
mongo_users$find(field_userID, update=update_views)
update_views
field_userID
mongo_users
mongo_users$find(field_userID}
mongo_users$find(field_userID)
mongo_users$find(field_userID, update=update_views)
update_views
field_userID
temp_user
tmp_user
field_postID
update_views
mongo_posts$update(field_postID, update=update_views)
field_postID
field_userID
update_views
mongo_users$find(field_userID)
mongo_users$find(field_userID, update = update_views)
mongo_users$find(field_userID)
mongo_users$find(field_userID, update=update_views)
update_views
field_userID
mongo_users$find(field_userID, update="$set: { profile_views: 1}")
mongo_users$find(field_userID, update="$set: { 'profile_views': 1}")
mongo_users$find(field_userID)
mongo_users$find(field_userID, update="$set: { 'profile_views': "1""}")
mongo_users$find(field_userID, update="$set: { 'profile_views': '1'}")
library(mongolite)
## Connect to mongodb from a mongolab location
host <- "ds061954.mongolab.com:61954"
username <- "user1"
password <- "user1"
db <- "app_rumen"
url <- paste0("mongodb://",username,":",password,"@", host, "/",db)
mongo_posts <- mongo(collection="posts", db=db, url = url)
mongo_comments <- mongo(collection="comments", db=db, url = url)
mongo_archive_posts <- mongo(collection="archive_posts", db=db, url = url)
mongo_archive_comments <- mongo(collection="archive_comments", db=db, url = url)
mongo_completed_posts <- mongo(collection="completed_posts", db=db, url = url)
mongo_resolved_posts <- mongo(collection="resolved_posts", db=db, url = url)
mongo_discontinued_posts <- mongo(collection="discontinued_posts", db=db, url = url)
mongo_users <- mongo(collection="users", db=db, url = url)
mongo_system_use <-   mongo(collection="system_use", db=db, url = url)
runApp()
Q
debugger()
options(error=dump.frames)
runApp()
debugger()
runApp()
mongo_users$find(field_userID, update=update_views)
debugger()
0
mongo_users$find(field_userID, update=update_views)
mongo_users
mongo_users$update(field_userID, update=update_views)
a <- 1
b <- 2
list(a,b)
runApp()
tmp_list
list(a,b)
list(a,b) %>% unlist()
list(a,b,c=c(1,2))
list(a,b, c=c(1,2,3)) %>% unlist()
list(a,b, c=c(1,2,3)) %>% unlist() %>% sum()
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"))
?sort
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE)
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE) %>% "["(1)
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE) %>% "["(2)
runApp()
runApp()
tmp_user
Q
NULL + 1
runApp()
tmp_list
tmp_user$active_posts
tmp_user$completed_posts
tmp_user$resolved_posts
tmp_user$discontinued_posts
# Retrive info related to this user
tmp_list <- list(active_posts = mongo_posts$find(field_userID),
comments = mongo_comments$find(field_userID_com),
archive_posts = mongo_archive_posts$find(field_userID),
archive_comments = mongo_archive_comments$find(field_userID_com),
completed_posts = mongo_completed_posts$find(field_userID),
resolved_posts = mongo_resolved_posts$find(field_userID),
discontinued_posts = mongo_discontinued_posts$find(field_userID)
)
all_post_names <- c("active_posts", "completed_posts","resolved_posts", "discontinued_posts")
lapply(c(all_post_names, "comments"),
function(item) tmp_user[[item]] <<- tmp_list[[item]] %>% nrow())
Q
runApp()
tmp_list
all_post_names <- c("active_posts", "completed_posts","resolved_posts", "discontinued_posts")
lapply(c(all_post_names, "comments"),
function(item) tmp_user[[item]] <<- tmp_list[[item]] %>% nrow())
tmp_user
(tmp_user$active_posts + tmp_user$completed_posts +
+ tmp_user$resolved_posts +  tmp_user$discontinued_posts)
lapply(all_post_names,
function(item) tmp_user[[item]]) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) tmp_list[[item]]$cumulative_views) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) tmp_list[[item]]$cumulative_comments) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist() %>% sum()/tmp_user$total_comments
tmp_list$active_posts$average_interest
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist()
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist() %>% sum()
tmp_user$total_comments
lapply(all_post_names,
function(item) {
tmp_list[[item]]$timestamp
}) %>% unlist() %>% sort(decreasing=TRUE) %>% "["(1)
lapply(c("comments","archive_comments"),
function(item) {
tmp_list[[item]]$timestamp2
}) %>% unlist() %>% sort(decreasing=TRUE) %>% "["(1)
tmp_list$comments
lapply(c("comments","archive_comments"),
function(item) {
tmp_list[[item]]$timestamp2
}) %>% unlist() %>%
print()
sort(NULL)
NULL[1]
runApp()
runApp()
runApp()
runApp()
runApp()
field_userID
update_edit
runApp()
update_edit)
update_edit
field_userID
Q
Q
runApp()
update_edit
field_userID
runApp()
input$interests
paste(input$interests)
cat(input$interests)
cat(input$interests, sep=',')
cat(input$interests, sep=', ')
cat(input$interests, sep=', ')
a <- cat(input$interests, sep=', ')
a
a <- cat("Collaborating, Dairy Productivity", sep=', ')
a
a
a <- cat("Collaborating" "Dairy Productivity", sep=', ')
runApp()
input$interest
input$interests
str(input$interests)
mode(input$interests)
tmp_user
input$interests
tmp_users$interests
tmp_user$interests
input$interests
str(input$interests)
str(input$interests)[1]
str(input$interests)[2]
(input$interests)[1]
(input$interests)[2]
c(input$interests)
c(input$interests)[1]
tmp_user
input$interests
input$interests %>% c()
update_edit
a <- c("A", "B")
a
strsplit("A, B", ", ")
strsplit("A, B", ", ")[[1]]
runApp()
strsplit(NULL, ",")
runApp()
strsplit(NULL, ",")
ifelse(is.null(tmp_user$interests), NULL, strsplit(tmp_user$interests,
", ")[[1]])
str_interests
input$interests[i]
input$interests
input$interests[1]
runApp()
?setNames
?state.name
state.name
state.name-"Minnesota"
state.name[-state.name=="Minnesota"]
state.name[-c(state.name=="Minnesota")]
(state.name=="Minnesota")
state.name[state.name!="Minnesota"]
c("Minnesota",state.name[state.name!="Minnesota"], "Other")
runApp()
runApp('~/Documents/shiny/Robot')
runGitHub("Robot", "kotamine")
runGitHub("shiny/tree/master/Robot", "kotamine")
runGitHub("tree/master/Robot", "kotamine/shiny")
runGitHub("Robot", "kotamine/shiny")
runGitHub("shiny/Robot", "kotamine")
runGitHub("shiny", "kotamine",subdir="Robot")
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
shiny::runApp()
runApp()
runApp()
runApp()
filter_postID
filter_userID
Q
runApp()
filter_userID
filter_userID
filter_postID
mongo_posts$find("{ \"postID\": { \"$in\": [",
filter_postID, "]}}")
mongo_posts$find("{\"postID\": { \"$in\": [",
filter_postID, "]}}")
mongo_posts$find("{\"postID\": [",
filter_postID, "]}")
mongo_posts$find("{\"postID\": ",
filter_postID, "}")
mongo_posts$find("{\"postID\": '", filter_postID, "'}")
mongo_posts$find(paste0("{\"postID\": '", filter_postID, "'}"))
mongo_posts$find(paste0("{\"postID\": ", filter_postID, "}"))
mongo_posts$find(paste0('{ $or: [ {"postID": { "$in": [', filter_postID,']}},',
'{"email_address": { "$in": [', filter_userID,']}} ]}'))
mongo_posts$find(paste0('{ $or: ["{\"postID\": '", filter_postID, "'}", "{\"postID\": '", filter_postID, "'}]}"))
mongo_posts$find(paste0('{ $or: ["{\"postID\":", filter_postID, "}", "{\"postID\":", filter_postID, "}]}"))
)
}
]
]a
ff
../
ssf
ssf=
==
//
EQ
C
C
1
`
1
2
2
}}
[]
ad
