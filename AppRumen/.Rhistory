0
mongo_users$find(field_userID, update=update_views)
mongo_users
mongo_users$update(field_userID, update=update_views)
a <- 1
b <- 2
list(a,b)
runApp()
tmp_list
list(a,b)
list(a,b) %>% unlist()
list(a,b,c=c(1,2))
list(a,b, c=c(1,2,3)) %>% unlist()
list(a,b, c=c(1,2,3)) %>% unlist() %>% sum()
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"))
?sort
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE)
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE) %>% "["(1)
sort(c("2015-10-19-17:05:20", "2015-12-06-11:57:27"),decreasing=TRUE) %>% "["(2)
runApp()
runApp()
tmp_user
Q
NULL + 1
runApp()
tmp_list
tmp_user$active_posts
tmp_user$completed_posts
tmp_user$resolved_posts
tmp_user$discontinued_posts
# Retrive info related to this user
tmp_list <- list(active_posts = mongo_posts$find(field_userID),
comments = mongo_comments$find(field_userID_com),
archive_posts = mongo_archive_posts$find(field_userID),
archive_comments = mongo_archive_comments$find(field_userID_com),
completed_posts = mongo_completed_posts$find(field_userID),
resolved_posts = mongo_resolved_posts$find(field_userID),
discontinued_posts = mongo_discontinued_posts$find(field_userID)
)
all_post_names <- c("active_posts", "completed_posts","resolved_posts", "discontinued_posts")
lapply(c(all_post_names, "comments"),
function(item) tmp_user[[item]] <<- tmp_list[[item]] %>% nrow())
Q
runApp()
tmp_list
all_post_names <- c("active_posts", "completed_posts","resolved_posts", "discontinued_posts")
lapply(c(all_post_names, "comments"),
function(item) tmp_user[[item]] <<- tmp_list[[item]] %>% nrow())
tmp_user
(tmp_user$active_posts + tmp_user$completed_posts +
+ tmp_user$resolved_posts +  tmp_user$discontinued_posts)
lapply(all_post_names,
function(item) tmp_user[[item]]) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) tmp_list[[item]]$cumulative_views) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) tmp_list[[item]]$cumulative_comments) %>% unlist() %>% sum()
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist() %>% sum()/tmp_user$total_comments
tmp_list$active_posts$average_interest
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist()
lapply(all_post_names,
function(item) {
tmp_list[[item]]$average_interest * tmp_list[[item]]$cumulative_comments
}) %>% unlist() %>% sum()
tmp_user$total_comments
lapply(all_post_names,
function(item) {
tmp_list[[item]]$timestamp
}) %>% unlist() %>% sort(decreasing=TRUE) %>% "["(1)
lapply(c("comments","archive_comments"),
function(item) {
tmp_list[[item]]$timestamp2
}) %>% unlist() %>% sort(decreasing=TRUE) %>% "["(1)
tmp_list$comments
lapply(c("comments","archive_comments"),
function(item) {
tmp_list[[item]]$timestamp2
}) %>% unlist() %>%
print()
sort(NULL)
NULL[1]
runApp()
runApp()
runApp()
runApp()
runApp()
field_userID
update_edit
runApp()
update_edit)
update_edit
field_userID
Q
Q
runApp()
update_edit
field_userID
runApp()
input$interests
paste(input$interests)
cat(input$interests)
cat(input$interests, sep=',')
cat(input$interests, sep=', ')
cat(input$interests, sep=', ')
a <- cat(input$interests, sep=', ')
a
a <- cat("Collaborating, Dairy Productivity", sep=', ')
a
a
a <- cat("Collaborating" "Dairy Productivity", sep=', ')
runApp()
input$interest
input$interests
str(input$interests)
mode(input$interests)
tmp_user
input$interests
tmp_users$interests
tmp_user$interests
input$interests
str(input$interests)
str(input$interests)[1]
str(input$interests)[2]
(input$interests)[1]
(input$interests)[2]
c(input$interests)
c(input$interests)[1]
tmp_user
input$interests
input$interests %>% c()
update_edit
a <- c("A", "B")
a
strsplit("A, B", ", ")
strsplit("A, B", ", ")[[1]]
runApp()
strsplit(NULL, ",")
runApp()
strsplit(NULL, ",")
ifelse(is.null(tmp_user$interests), NULL, strsplit(tmp_user$interests,
", ")[[1]])
str_interests
input$interests[i]
input$interests
input$interests[1]
runApp()
?setNames
?state.name
state.name
state.name-"Minnesota"
state.name[-state.name=="Minnesota"]
state.name[-c(state.name=="Minnesota")]
(state.name=="Minnesota")
state.name[state.name!="Minnesota"]
c("Minnesota",state.name[state.name!="Minnesota"], "Other")
runApp()
runApp('~/Documents/shiny/Robot')
runGitHub("Robot", "kotamine")
runGitHub("shiny/tree/master/Robot", "kotamine")
runGitHub("tree/master/Robot", "kotamine/shiny")
runGitHub("Robot", "kotamine/shiny")
runGitHub("shiny/Robot", "kotamine")
runGitHub("shiny", "kotamine",subdir="Robot")
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
runApp('~/Documents/shiny/Robot')
shiny::runApp()
runApp()
runApp()
runApp()
filter_postID
filter_userID
Q
runApp()
filter_userID
filter_userID
filter_postID
mongo_posts$find("{ \"postID\": { \"$in\": [",
filter_postID, "]}}")
mongo_posts$find("{\"postID\": { \"$in\": [",
filter_postID, "]}}")
mongo_posts$find("{\"postID\": [",
filter_postID, "]}")
mongo_posts$find("{\"postID\": ",
filter_postID, "}")
mongo_posts$find("{\"postID\": '", filter_postID, "'}")
mongo_posts$find(paste0("{\"postID\": '", filter_postID, "'}"))
mongo_posts$find(paste0("{\"postID\": ", filter_postID, "}"))
mongo_posts$find(paste0('{ $or: [ {"postID": { "$in": [', filter_postID,']}},',
'{"email_address": { "$in": [', filter_userID,']}} ]}'))
mongo_posts$find(paste0('{ $or: ["{\"postID\": '", filter_postID, "'}", "{\"postID\": '", filter_postID, "'}]}"))
mongo_posts$find(paste0('{ $or: ["{\"postID\":", filter_postID, "}", "{\"postID\":", filter_postID, "}]}"))
)
}
]
]a
ff
../
ssf
ssf=
==
//
EQ
C
C
1
`
1
2
2
}}
[]
ad
shiny::runApp()
runApp()
runApp()
rv$selected_post
mong_posts$find()
mongo_posts$find()
mongo_posts$find('{"postID":1445138343 }')
mongo_posts$find()$postID
mongo_posts$find('{"postID":[1445138343 ,1449424681 ]}')
mongo_posts$find('{"postID": {"$in" [1445138343 ,1449424681 ]} }')
mongo_posts$find('{"postID": {"$in": [1445138343 ,1449424681 ] } }')
com_list <- c()
if (!is.null(N_comments)) {
for (i in 1:N_comments) {
com_list <- paste0(com_list, active_comments$commentID[i],", ")
}
}
com_list
active_comments$commentID
N_comments
runApp()
rv$active_comments
rv$selected_comments[rv$selected_comments$comment_status=="Active",]
rv$selected_comments
rv$selected_post$postID
mongo_comments$find(paste0('{"postID":',  1449425394,'}'))
mongo_comments$find()
runApp()
sorted_table_posts$post_name
rv$selected_post
runApp()
rv$selected_post
sorted_table_posts$post_name
post_IDs
sorted_table_posts$postID
post_IDs
runApp()
runApp()
post_IDs
post_IDs
runApp()
field_postID
sorted_table_posts$postID
post_IDs
field_postID
i
tmp_post
runApp()
runApp()
runApp()
fields_post
field_postID
runApp()
runApp()
Q
runApp()
com_list
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", com_list, "]}}"))
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", 1445138348, 1445138349 "]}}"))
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", 1445138348, 1445138349 ]}}"))
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", 1445138348, 1445138349 ,"]}}"))
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", "1445138348, 1445138349" ,"]}}"))
mongo_comments$update(field_commentID, paste0("{\"commentID\": {\"$in\": [", \"1445138348, 1445138349\", \"]}}\"))
paste0("{\"commentID\": {\"$in\": [", \"1445138348, 1445138349\", \"]}}\")
paste0("{\"commentID\": {\"$in\": [", "1445138348, 1445138349", "]}}")
mongo_comments$update(field_commentID,  paste0("{\"commentID\": {\"$in\": [", "1445138348, 1445138349", "]}}"))
mongo_comments$update(field_commentID,  "{\"commentID\": {\"$in\": [1445138348, 1445138349]}}")
mongo_comments$find("{\"commentID\": {\"$in\": [1445138348, 1445138349]}}")
mongo_comments$find( paste0("{\"commentID\": {\"$in\": [", "1445138348, 1445138349", "]}}"))
Q
runApp()
field_commentID
mongo_comments$update(field_commentID, update_status)
Q
runApp()
runApp()
Q
runApp()
table_users_copy
tmp_sort
sorted_table_users$email_address
runApp()
table_users_copy[rev(order(tmp_sort)),]
tmp_sort)
tmp_sort
table_users_copy
input$sortPeople
Q
runApp()
runApp()
runApp()
posts
posts$post_name
list_post_links(posts$post_name, "user_post")
runApp()
Q
runApp()
length(post_names)
post_names
post_IDs
runApp()
rv$selected_user
rv$selected_user
runApp()
runApp()
user_IDs
link_id
i
post_IDs[i]
post_IDs
post_IDs
i
rv$selected_post
rv$selected_post
runApp()
Q
runApp()
new_row
row_inputs(fields_post)
fields_post
runApp()
Q
runApp()
runApp()
runApp()
new_row
Q
runApp()
list1
list1 %>% unlist
runApp()
active_comments
shiny::runApp('~/Downloads/Robot')
shiny::runApp('~/Downloads/Robot')
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp()
shiny::runApp()
shiny::runApp()
mongo_messages$find()
shiny::runApp()
selected
messageID
message_seq
mongo_messages$find()[1,]
messageID
mongo_messages$find(messageID)
tbl$post_link
tbl$post_link
shiny::runApp()
tbl$post_link
mongo_comments$find()
mongo_comments$remove('{"post_name": ""}',multiple=TRUE)
mongo_comments$find()
mongo_comments$find()
list1
row_inputs(fields_comment, list1)
mongo_comments$remove('{"post_name": ""}',multiple=TRUE)
shiny::runApp()
mongo_messages$find()
mongo_messages$update('{}','{"$set":{"viewed_by_receiver":0}}')
mongo_messages$find()
mongo_messages$update('{}','{"$set":{"viewed_by_receiver":0}}',multiple=TRUE)
mongo_messages$find()
1 %in% c(1,2,3)
shiny::runApp()
Q
shiny::runApp()
tbl
dim(tbl)[1]
msgs <- apply(tbl, 1, function(row) {
messageItem(from = row$sender_name, message = paste0(strtrim(row$content,15),".."))
})
msgs <- lapply(tbl, function(row) {
messageItem(from = row$sender_name, message = paste0(strtrim(row$content,15),".."))
}) %>% data.frame()
msgs <- lapply(1:3, function(row) {
messageItem(from = tbl[row,]$sender_name, message = paste0(strtrim(tbl[row,]$content,15),".."))
}) %>% data.frame()
lapply(1:3, function(row) {
messageItem(from = tbl[row,]$sender_name, message = paste0(strtrim(tbl[row,]$content,15),".."))})
lapply(1:3, function(row) {
messageItem(from = tbl[row,]$sender_name, message = paste0(strtrim(tbl[row,]$content,15),".."))}) %>% data.frame
lapply(1:3, function(row) {
messageItem(from = tbl[row,]$sender_name, message = paste0(strtrim(tbl[row,]$content,15),".."))}) %>% data.frame(stringsAsFactors = stringsAsFactors)
lapply(1:3, function(row) {
messageItem(from = tbl[row,]$sender_name, message = paste0(strtrim(tbl[row,]$content,15),".."))}) %>% data.frame(stringsAsFactors = TRUE)
shiny::runApp()
msgs
mongo_users$find()
mongo_users$find() %>% colnames()
user_fields <- c(
"timestamp", "email_address", "user_name", "profession", "interests", "location",
"last_logged_in", "profile_views","about", "linked_in", "n_followed_posts", "n_followers"
)
user_fields
lapply(user_fields, function(var) var=NA)
tmp_row <- lapply(user_fields, function(var) NA)
colnames(tmp_row) <- user_fields
tmp_row <- lapply(user_fields, function(var) NA) %>% data.frame()
colnames(tmp_row) <- user_fields
tmp_row
mongo_users$update('{}','{"$set":{"n_log_in":0}}',multiple=TRUE)
mongo_users$find() %>% colnames()
new_row <- lapply(user_fields, function(var) NA) %>% data.frame()
colnames(new_row) <- user_fields
new_row$timestamp <- get_time_human()
new_row$email_address <- rv$email_address
new_row$user_name <- rv$user_name
new_row$last_logged_in <- as.integer(get_time_epoch())
new_row$profile_views <- 0
new_row$n_followed_posts <- 0
new_row$n_followers <- 0
new_row$n_log_in <- 0
new_row[is.na(new_row)] <- NULL
is.na(new_row)
new_row[is.na(new_row)]
new_row[is.na(new_row)] <- NULL
new_row[is.na(new_row)] <- NA
shiny::runApp()
mongo_users$find()
rbind(c(1,2,3),rep(0,0))
shiny::runApp()
nrow(NULL)
nrow(NULL)>0
nrow(NULL)>0==TRUE
(nrow(NULL)>0)==TRUE
shiny::runApp()
shiny::runApp()
rbind(new_row, rep(0, (length(colnames1) - length(new_row))))
rbind(new_row, matrix(rep(0, (length(colnames1) - length(new_row))),nrow=1))
length(colnames1) - length(new_row)
length(colnames1) - ncol(new_row)
rep(0,(length(colnames1) - ncol(new_row)))
shiny::runApp()
rv$selected_user
!is.null(rv$selected_user)
nrow(rv$selected_user)
new_row
shiny::runApp()
rv$selected_user
shiny::runApp()
user_IDs
i
mongo_users$find(field_postID)
field_postID
mongo_users$find()
mongo_users$find("{\"email_address\":\"kota@umd.edu\"}")
mongo_users$find("{\"email_address\":\"kota@umn.edu\"}")
mongo_posts$find()$email_address
mongo_posts$update('{"email_address":"kota@umd.edu"}', '{"$set":{"email_address":"kota@umn.edu"}',multiple=TRUE)
mongo_posts$update('{"email_address":"kota@umd.edu"}', '{"$set":{"email_address":"kota@umn.edu"}}',multiple=TRUE)
mongo_posts$find()$email_address
mongo_users$find(field_postID)
rv$selected_user
r\
rv$selected_user
rv$selected_user
Q
shiny::runApp()
length(rv$selected_user)
nrow(rv$selected_user)
shiny::runApp()
Q
shiny::runApp()
rep(0, (length(colnames1) - ncol(new_row)))
length(colnames1) - ncol(new_row)
rep(0,length(colnames1) - ncol(new_row))
rep(0,(length(colnames1) - ncol(new_row)))
rep(0,0)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mongo_messages$find() %>% colnames()
shiny::runApp()
data.frame(message_id = user_session$message$message_id,
timestamp = get_time_human(), sender_email_address = rv$email_address,
sender_name = rv$user_name, receiver_email_address = rv$selected_user$email_address,
receiver_name = rv$selected_user$user_name, viewed_by_receiver = 0,
content = input$msg_content, title = input$msg_title)
data.frame(message_id = user_session$message$message_id,
timestamp = get_time_human())
user_session$message$message_id
as.integer(get_time_epoch())
data.frame(message_id=as.integer(get_time_epoch()),
timestamp=get_time_human())
shiny::runApp()
