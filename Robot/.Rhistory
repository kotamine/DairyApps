<<<<<<< Updated upstream
=======
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
theme: flatly
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('DEA_app')
shiny::runApp('~/Documents/shiny/Robot')
tbl
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
input$profile_choice
p
choices[p]
shiny::runApp('~/Documents/shiny/Robot')
input$milk_change
shiny::runApp('~/Documents/shiny/Robot')
p
p
shiny::runApp('~/Documents/shiny/Robot')
rp$milk_change
rp$pellets
rp$table_after_tax
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
rp$inc_rev_total
rp$inc_exp_total
rp$dec_exp_total
rp$inc_exp_herd_increase
rp$inc_exp_feed
rp$inc_exp_pellet
rp$inc_exp_record_management
rp$inc_exp_repair
rp$inc_exp_replacement
rp$inc_exp_utilities
rp$repair
rp$repair_total
rp$insurance_rate
input$insurance_rate
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$bw_wage_before_tax
rp$bw_wage_after_tax
rp$bw_wage_inflation_after_tax
rp$bw_wage_inflation_before_tax
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$milk_feed
rp$labor_repair
rp$capital
rp$misc
rp$inflation
rp$NAI
rp$bw_wage_after_tax
rp$net_annual_impact_after_tax
rp$net_annual_impact_before_tax
rp$tax_revenue_minus_expense
rp$tax_interest
rp$tax_depreciation
rp$adj_WACC_hurdle
rp$adj_WACC_interest
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$table_before_tax_cash_flow[1,
]
rp$table_before_tax_cash_flow
rp$table_before_tax
rp$table_before_tax[1,]
rp$table_before_tax[1,] %>% round()
tbl
c(round(rp$table_before_tax[1,]))
round(rp$table_before_tax[1,])
round(rp$table_before_tax[1,]) %>% unlist
round(rp$table_before_tax[1,]) %>% unlist()
c(round(rp$table_before_tax[1,])) %>% unlist()
matrix(round(rp$table_before_tax[1,]), ncol=1)
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=matrix(round(rp$table_before_tax[1,]),ncol=1),
after.tax =matrix(round(rp$table_after_tax[1,]),ncol=1)
)
tbl
library(googleVis)
df <- data.frame(profile =c("A","B","C","D"),
var1 = c(1,2,2,1),
var2 = c(4,2,6,3))
gvisColumnChart(df, xvar="profile", yvar=c("var1","var2"),
options=list(isStacked=FALSE)) %>% plot()
df
gvisColumnChart(df, xvar="profile", yvar=c("var1","var2")) %>% plot()
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
tbl
tbl[,2]
tbl$before.tax
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=c(matrix(round(rp$table_before_tax[1,]),ncol=1)),
after.tax =c(matrix(round(rp$table_after_tax[1,]),ncol=1))
)
tbl
c(matrix(round(rp$table_before_tax[1,]),ncol=1))
round(rp$table_before_tax['Net Annual Impact',]
)
round(rp$table_before_tax['Net Annual Impact',])
data.frame(b=round(rp$table_before_tax['Net Annual Impact',]))
data.frame(b=as.matrix(round(rp$table_before_tax['Net Annual Impact',])))
as.integers(round(rp$table_before_tax['Net Annual Impact',]))
as.numeric(round(rp$table_before_tax['Net Annual Impact',]))
data.frame(b=as.numeric(round(rp$table_before_tax['Net Annual Impact',])))
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=as.numeric(round(rp$table_before_tax[1,])),
after.tax =as.numeric(round(rp$table_after_tax[1,]))
)
tbl
tbl[,2]
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
paste("{title:Impact under",
robot_or_parlor(), "($)")
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
input$abc
a <- list
a$aa
a <- list()
a
a$a <-1
a
a$b
a$b %>% is.null()
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
rp$cost_milking
rp$cost_milking2
rp$cost_parlors
rp$cost_robot
shiny::runApp('~/Documents/shiny/Robot')
rp$cost_parlors
rp$cost_milking
shiny::runApp('~/Documents/shiny/Robot')
p
p
p
rp$cost_parlors
rp$cost_robot
rp$cost_robot
rp$cost_parlors
Q
shiny::runApp('~/Documents/shiny/Robot')
p
p
p
p
p
rp$cost_housing
rp$copy_cost_housing
rv$copy_cost_housing_pr4
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
install.packages('devtools')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
library(devtools)
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
input$cost_housing_cow
input$milk_change
input$hr_sv_milking
input$cost_robot
input$cost_parlors
input$milking_years
input$pellets
mins_production_change
length(mins_production_change)
length(steps_production_change)
length(varnames_production_change)
input$robot_parlor
input$profile_choice
input$milk_change
input$cost_housing_cow
input$cost_housing_cow_pr1
input$cost_housing_cow
input$hr_sv_milking
input$hr_sv_milking
input$cost_housing_cow
''
shiny::runApp('~/Documents/shiny/Robot')
x
x
x
input$x
input[[x]]
length(varnames_production_change)
i
varnames
length(varnames)
length(varnames)
input$milk_change
input$cost_housing_cow
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
tbl_robot
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
varnames
input[[varnames[n]]]
input[[varnames[1]]
]
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp()
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
>>>>>>> Stashed changes
x
x
x
x
# http://www.excel-easy.com/examples/depreciation.html
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
debt_table <- function(loan, interest_rate, loan_period,
n_period, starting_year=1) {
loan_period <- round(loan_period,0)
n_period <- round(n_period,0)
starting_year <- round(starting_year,0)
pmt <- -pmt(interest_rate, loan_period, loan)
interest <- impt(interest_rate, 1, loan_period, loan)
principal <- pmt - interest
df <- data.frame(year=c(1:n_period), yr_pmt =rep(0,n_period))
ending_year <- loan_period + starting_year - 1
df$yr_pmt[starting_year:ending_year] <- c(1:loan_period)
df$interest <-  (df$yr_pmt >0) *
(-1) * impt(interest_rate, df$yr_pmt, loan_period, loan)
df$principal <- (df$yr_pmt >0) * (pmt - df$interest)
return(df)
}
# --- Common Excel Financial Functions  ---
# \url{http://cvs.moodle.org/contrib/patches/question_calculated_extended/calculated/packages/financial/financial_class.php?view=co}
# @author Enrique Garcia M. \email{egarcia@@egm.as}
# @author Karsten W. \email{k.weinert@@gmx.net}
npv <- function(rate, values) sum(values / (1 + rate)^seq_along(values))
irr <- function(x, start=0.1) {
t <- seq_along(x)-1
f <- function(i) abs(sum(x/(1+i)^t))
return(nlm(f,start)$estimate)
}
fv <- function(rate, nper, pmt, pv = 0.0, type = 0) {
pvif <- (1+rate)^nper # Present value interest factor
fvifa <- if(rate==0) nper else ((1+rate)^nper - 1) / rate
return(-((pv * pvif) + pmt * (1.0 + rate * type) * fvifa))
}
pv <- function(rate, nper, pmt, fv = 0.0, type = 0) {
pvif <- (1+rate)^nper # Present value interest factor
fvifa <- if(rate==0) nper else ((1+rate)^nper - 1) / rate
return((-fv - pmt * (1.0 + rate * type) * fvifa) / pvif)
}
pmt <- function(rate, nper, pv, fv=0, type=0) {
rr <- 1/(1+rate)^nper
res <- (-pv-fv*rr)*rate/(1-rr)
return(res/(1+rate*type))
}
# additional functions
mirr <- function(values, finance_rate, reinvest_rate) {
n <- length(values)
tmp <- npv(reinvest_rate,values)*(1+reinvest_rate)^n/
npv(finance_rate,values)*(1+finance_rate)
return(tmp^(1/(n-1))-1)
}
rate <- function(nper, pmt, pv) {
irr(c(pv,rep(pmt, nper)))
}
# annualized net present value
# need: library(dplyr) for %>% operation
anpv <- function(x, r, i, nper) {
x_seq <- lapply(c(1:nper), function(t) { x*(1+i)^(t-1) }) %>% unlist()
-pmt(r, nper, npv(r, x_seq))
}
# Used to bring anpv() back to the real term basis
deflator <- function(nper, i) {
nper/sum((1 + i)^(seq_along(c(1:nper)-1)))
}
# http://www.experts-exchange.com/articles/1948/A-Guide-to-the-PMT-FV-IPMT-and-PPMT-Functions.html
impt <- function(rate, per, nper, pv, fv=0, type=0) {
pmt <- pmt(rate, nper, pv, fv, type)
fv(rate, per-1, pmt, pv, type) * rate
}
zeros <- function(r,c) matrix(c(mat.or.vec(r,c)),nrow=r,ncol=c)
ones <- function(r,c) matrix(c(rep(1,r*c)),nrow=r,ncol=c)
nulls <- function(r,c) matrix(c(rep(NA,r*c)),nrow=r,ncol=c)
my_add_row <- function(A,a) {
# A: data.frame
# a: row vector that is going to be appended to A
A <- as.matrix(A)
A <- rbind(A,a)
data.frame(A)
}
formatcomma <- function(x, digits=NULL) {
if (length(x)==0) { return(NA) }
if (is.null(digits)) {
format(x, big.mark=",", scientific=FALSE)
} else {
format(round(x,digits), big.mark=",", scientific=FALSE)
}
}
formatdollar <- function(x,digit=0) {
#if (is.na(x)) { return(NA) }
if (length(x)==0) { return(NA) }
#if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("$",x %>% round(digit) %>% formatcomma())
} else {
paste0("-$",-x %>% round(digit) %>% formatcomma())
}
}
formatdollar2 <- function(x,digit=0) {
if (is.na(x)) { return(NA) }
if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("+$",x %>% round(digit) %>% formatcomma())
} else {
paste0("-$",-x %>% round(digit) %>% formatcomma())
}
}
formatdollar2b <- function(x,digit=0) {
if (is.na(x)) { return(NA) }
if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("( +$",x %>% round(digit) %>% formatcomma()," )")
} else {
paste0("( -$",-x %>% round(digit) %>% formatcomma()," )")
}
}
df_null <- function(colnames) {
dummy <- matrix(rep(NA,length(colnames)),nrow=1)
colnames(dummy) <- colnames
empty_table <- data.frame(Column1 = numeric(0))
empty_table <- rbind(empty_table, dummy)[NULL,]
empty_table
}
## ---- Debt Table ---
# interest rate info
loan_robot_1 <- rv$robot_invest
loan_robot_2 <- rv$robot_invest*(1+input$inflation_robot)^input$robot_year
loan_period_robot <- round(input$robot_year*.8)
loan_housing <- rv$cost_housing
loan_period_housing <- round(rv$housing_year*.8)
tbl_robot <- debt_table(loan_robot_1, interest_rate, loan_period_robot, n_years , 1) +
+ debt_table(loan_robot_2, interest_rate, loan_period_robot, n_years, robot_year+1)
colnames(tbl_robot) <- lapply(colnames(tbl_robot), function(x) { paste0("robot_",x)}) %>% unlist()
tbl_barn <- debt_table(loan_housing, interest_rate, loan_period_housing, n_years, 1)
colnames(tbl_barn) <- lapply(colnames(tbl_barn), function(x) { paste0("barn_",x)}) %>% unlist()
table_debt <- cbind(tbl_robot, tbl_barn[,c(-1)])
table_debt$interest_total <- table_debt$robot_interest + table_debt$barn_interest
table_debt$principal_total <- table_debt$robot_principal + table_debt$barn_principal
cost_robot <- 360000
salvage_robot <- 45000
robot_year_AGDS <- 7
vdb(cost_robot, salvage_robot, robot_year_AGDS, factor=1.5, sequence=TRUE)
n_years <- 50;
c(rep(0,0),c(1:3))
shiny::runApp()
shiny::runApp()
x
x
x
x
x
x
x
x
shiny::runApp()
shiny::runApp()
shiny::runApp()
ans[[x]]$tax_interest
ans[[x]]$interest_at_interest
(pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
a
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking$interest[-1])
)
ans[[x]]$table_debt$milking$interest[-1])
ans[[x]]$table_debt$milking$interest[-1]
ans[[x]]$table_debt$milking$interest
ans[[x]]$table_debt
table_debt$milking_interest
ans[[x]]$table_debt$milking_interest
ans[[x]]$table_depreciation$depreciation_milking_system
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest))
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_principal)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_principal))
input$tax_rate/100 * (pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_depreciation$depreciation_milking_system)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_depreciation$depreciation_housing)))
shiny::runApp()
ans[[x]]$tax_interest
ans[[x]]$interest_at_interest
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest))
ans[[x]]$interest_at_interest
shiny::runApp()
ans[[x]]$tax_interest
ans[[x]]$revenue_minus_expense
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ans[[x]]$revenue_minus_expense
ans[[x]]$depreciation_at_interest
(ans[[x]]$adj_revenue_minus_expense + ans[[x]]$adj_interest)*(1-input$tax_rate/100)
ans[[x]]$adj_revenue_minus_expense
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1])) +
+ pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1]))
ans[[x]]$adj_depr*input$tax_rate/100 + ans[[x]]$adj_principal + ans[[x]]$adj_salvage
ans[[x]]$adj_interest
shiny::runApp()
ans[[x]]$net_annual_impact_before_tax
ans[[x]]$tax_revenue_minus_expense
ans[[x]]$tax_interest + ans[[x]]$tax_depreciation + ans[[x]]$adj_WACC_interest
ans[[x]]$adj_WACC_hurdle
ans[[x]]$pb_net_annual_impact_before_tax
shiny::runApp()
ans[[x]]$table_cash_flow
ans[[x]]$table_debt$milking_interest
ans[[x]]$table_debtans[[x]]
ans[[x]]$table_debtans
ans[[x]]$table_debt
(input[[paste0("n_sets",x)]] == 2)
ans[[x]]$cost_milking2
ans[[x]]$loan_milking2
debt_table(ans[[x]]$loan_milking2, input[[paste0("r_milking1",x)]]/100, input[[paste0("n_yr_milking1",x)]], n_years, input[[paste0("useful_years",x)]]+1) * (ans[[x]]$n_sets <- 2)
n_years <- 30
debt_table(ans[[x]]$loan_milking2, input[[paste0("r_milking1",x)]]/100, input[[paste0("n_yr_milking1",x)]], n_years, input[[paste0("useful_years",x)]]+1) * (ans[[x]]$n_sets <- 2)
debt_table(ans[[x]]$loan_milking2, input[[paste0("r_milking1",x)]]/100, input[[paste0("n_yr_milking1",x)]], n_years, input[[paste0("useful_years",x)]]+1)
shiny::runApp()
ans[[x]]$avg_interest
- pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1])) +
- (ans[[x]]$pb_positive_total - ans[[x]]$pb_negative_total + ans[[x]]$capital_cost_total)
ans[[x]]$capital_cost_total
ans[[x]]$pb_negative_total
ans[[x]]$pb_positive_total
pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1]))
ans[[x]]$table_cash_flow
- pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1]))
(ans[[x]]$pb_positive_total - ans[[x]]$pb_negative_total + ans[[x]]$capital_cost_total)
- pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1])) +
- (ans[[x]]$pb_positive_total - ans[[x]]$pb_negative_total + ans[[x]]$capital_cost_total)
ans[[x]]$interest_at_interest
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest))
pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest))
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_housing",x)]]/100, ans[[x]]$table_debt$housing_interest))
pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_housing",x)]]/100, ans[[x]]$table_debt$barn_interest))
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_interest)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_housing",x)]]/100, ans[[x]]$table_debt$barn_interest))
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_debt$milking_principal)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_housing",x)]]/100, ans[[x]]$table_debt$barn_principal))
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100,  ans[[x]]$table_cash_flow$downpayment[-1])+
+ ans[[x]]$table_cash_flow$downpayment[1])
ans[[x]]$WACC
-pmt(ans[[x]]$WACC, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC,  ans[[x]]$table_cash_flow$downpayment[-1])+
+ ans[[x]]$table_cash_flow$downpayment[1])
ans[[x]]$table_cash_flow$downpayment[-1]
npv(ans[[x]]$WACC/100,  ans[[x]]$table_cash_flow$downpayment[-1])+
+ ans[[x]]$table_cash_flow$downpayment[1])
npv(ans[[x]]$WACC/100,  ans[[x]]$table_cash_flow$downpayment[-1])+
+ ans[[x]]$table_cash_flow$downpayment[1]
ans[[x]]$loan_housing
input[[paste0("r_housing",x)]]/100
ans[[x]]$loan_milking1
ans[[x]]$cost_housing + ans[[x]]$cost_milking
ans[[x]]$WACC
input[[paste0("down_milking1",x)]]
input[[paste0("down_housing",x)]]
input$tax_rate
((input[[paste0("down_housing",x)]] +input[[paste0("down_milking1",x)]]) * input$hurdle_rate +
+ (ans[[x]]$loan_housing * input[[paste0("r_housing",x)]]/100 + ans[[x]]$loan_milking1 * input[[paste0("r_milking1",x)]])/100*
(1-input$tax_rate/100))/(ans[[x]]$cost_housing + ans[[x]]$cost_milking)
- ((input[[paste0("down_housing",x)]] +input[[paste0("down_milking1",x)]]) * input$hurdle_rate)
((input[[paste0("down_housing",x)]] +input[[paste0("down_milking1",x)]]) * input$hurdle_rate/100 +
+ (ans[[x]]$loan_housing * input[[paste0("r_housing",x)]]/100 + ans[[x]]$loan_milking1 * input[[paste0("r_milking1",x)]])/100*
(1-input$tax_rate/100))/(ans[[x]]$cost_housing + ans[[x]]$cost_milking)
((input[[paste0("down_housing",x)]] +input[[paste0("down_milking1",x)]]) * input$hurdle_rate/100 +
+ (ans[[x]]$loan_housing * input[[paste0("r_housing",x)]]/100 +
+ ans[[x]]$loan_milking1 * input[[paste0("r_milking1",x)]]/100)*
(1-input$tax_rate/100))/(ans[[x]]$cost_housing + ans[[x]]$cost_milking)
ans[[x]]$adj_revenue_minus_expense
ans[[x]]$adj_interest
ans[[x]]$adj_depr
ans[[x]]$adj_principal
ans[[x]]$adj_salvage
ans[[x]]$interest_at_interest
shiny::runApp()
(pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_depreciation$depreciation_milking_system)) +
+ pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_depreciation$depreciation_housing)))
ans[[x]]$table_depreciation
ans[[x]]$cost_milking
ans[[x]]$cost_milking2
input[[paste0("n_robot",x)]] * input[[paste0("cost_robot",x)]]
input[[paste0("cost_robot",x)]]
ans[[x]]$cost_milking2
vdb(ans[[x]]$cost_milking2, 0,  yr_AGDS_milking, factor=1.5, sequence=TRUE)
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_depreciation$depreciation_milking_system))
pmt(input[[paste0("r_housing",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_housing",x)]]/100, ans[[x]]$table_depreciation$depreciation_housing)
)
ans[[x]]$adj_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$interest[-1]))
ans[[x]]$table_cash_flow
ans[[x]]$interest_at_interest
ans[[x]]$table_cash_flow$interest[-1
]
ans[[x]]$adj_salvage
ans[[x]]$adj_principal
ans[[x]]$principal_at_interest
pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$principal[-1]))
ans[[x]]$table_cash_flow
input[[paste0("n_yr_milking1",x)]]
debt_table(ans[[x]]$loan_milking1,input[[paste0("r_milking1",x)]]/100, input[[paste0("n_yr_milking1",x)]], n_years, 1)
ans[[x]]$n_sets
ans[[x]]$loan_milking2
input[[paste0("down_milking2",x)]]
ans[[x]]$cost_milking2
ans[[x]]$cost_milking2
input$inflation_robot/100
ans[[x]]$cost_milking
(input[[paste0("useful_years",x)]] + input[[paste0("yr_system1",x)]])
debt_table(ans[[x]]$loan_milking2, input[[paste0("r_milking1",x)]]/100, input[[paste0("n_yr_milking1",x)]], n_years, input[[paste0("useful_years",x)]]+1)
debt_table(ans[[x]]$loan_housing, input[[paste0("r_housing",x)]]/100, input[[paste0("n_yr_housing",x)]], n_years, 1
)
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$principal[-1]))
ans[[x]]$principal_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$principal[-1])) +
_ ans[[x]]$principal_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$principal[-1])) +
- ans[[x]]$principal_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$principal[-1])) +
+ ans[[x]]$principal_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$interest[-1])) +
- ans[[x]]$interest_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$interest[-1]))
- ans[[x]]$interest_at_interest
pmt(input[[paste0("r_milking1",x)]]/100, ans[[x]]$planning_horizon,
npv(input[[paste0("r_milking1",x)]]/100, ans[[x]]$table_cash_flow$salvage[-1]))
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$salvage[-1])) +
)
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$salvage[-1]))
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$depreciation[-1]))
ans[[x]]$depreciation_at_interest
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$depreciation[-1])) +
- ans[[x]]$depreciation_at_interest
shiny::runApp()
ans[[x]]$table_cash_flo
- pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1]))
- (ans[[x]]$pb_positive_total - ans[[x]]$pb_negative_total + ans[[x]]$capital_cost_total)
ans[[x]]$pb_positive_total
ans[[x]]$pb_negative_total
ans[[x]]$capital_cost_total
- pmt(ans[[x]]$avg_interest/100, ans[[x]]$planning_horizon, npv(ans[[x]]$avg_interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1])) +
- (ans[[x]]$pb_positive_total - ans[[x]]$pb_negative_total + ans[[x]]$capital_cost_total)
ans[[x]]$avg_interest/100
ans[[x]]$avg_interest/100
ans[[x]]$avg_interest
shiny::runApp()
ans[[x]]$table_depreciation
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100,  ans[[x]]$table_cash_flow$downpayment[-1])+
+ ans[[x]]$table_cash_flow$downpayment[1])
ans[[x]]$table_cash_flow
+ pmt(input$hurdle_rate/100, ans[[x]]$planning_horizon,
npv(input$hurdle_rate/100, ans[[x]]$table_cash_flow$downpayment[-1])+ans[[x]]$table_cash_flow$downpayment[1])
ans[[x]]$adj_salvage
-pmt(ans[[x]]$WACC/100, ans[[x]]$planning_horizon,
npv(ans[[x]]$WACC/100, ans[[x]]$table_cash_flow$salvage[-1]))
ans[[x]]$WACC/100
ans[[x]]$WACC
((input[[paste0("down_housing",x)]] +input[[paste0("down_milking1",x)]]) * input$hurdle_rate +
+ (ans[[x]]$loan_housing * input[[paste0("r_housing",x)]] +
+ ans[[x]]$loan_milking1 * input[[paste0("r_milking1",x)]])*
(1-input$tax_rate/100))/(ans[[x]]$cost_housing + ans[[x]]$cost_milking)
shiny::runApp()
ans[[x]]$table_depreciation
ans[[x]]$cost_milking2
shiny::runApp()
input[[paste0("milk_change"),"Robots"]]
input[[paste0("milk_change","Robots")]]
input$milk_cow_day
computeSquares <- function(n,messUpVisibility) {
# pre-allocate v
# (doesn't actually help!)
v <- 1:n
if(messUpVisibility) {
vLast <- v
}
# print details of v
.Internal(inspect(v))
for(i in 1:n) {
v[[i]] <- i^2
if(messUpVisibility) {
vLast <- v
}
# print details of v
.Internal(inspect(v))
}
v
}
<<<<<<< Updated upstream
computeSquares(5,FALSE)
computeSquares(5,TRUE)
computeSquares(5,FALSE)
computeSquares(5,TRUE)
computeSquares <- function(n,messUpVisibility) {
# pre-allocate v
# (doesn't actually help!)
v <- 1:n
if(messUpVisibility) {
vLast <- v
}
vv <- 0
# print details of v
.Internal(inspect(v))
for(i in 1:n) {
v[[i]] <- i^2
if(messUpVisibility) {
vLast <- vv
}
# print details of v
.Internal(inspect(v))
}
v
}
computeSquares(5,TRUE)
computeSquares <- function(n,messUpVisibility) {
# pre-allocate v
# (doesn't actually help!)
v <- 1:n
if(messUpVisibility) {
vLast <- v
}
vv <- 0
# print details of v
.Internal(inspect(v))
for(i in 1:n) {
v[[i]] <- i^2
if(messUpVisibility) {
vLast <- vv
v
}
# print details of v
.Internal(inspect(v))
}
v
}
computeSquares(5,TRUE)
computeSquares <- function(n,messUpVisibility) {
# pre-allocate v
# (doesn't actually help!)
v <- 1:n
if(messUpVisibility) {
vLast <- v
}
vv <- 0
# print details of v
.Internal(inspect(v))
for(i in 1:n) {
v[[i]] <- i^2
if(messUpVisibility) {
vLast <- vv
vLast2 <- v
}
# print details of v
.Internal(inspect(v))
}
v
}
computeSquares(5,TRUE)
=======
shiny::runApp()
refProfileName(base_profles[1])
base_profiles <- c("Robots","Retrofit","New")
combo_profiles <- c("RetrofitRobots","RetrofitNew")
refProfileName(base_profles[1])
refProfileName(base_profiles[1])
refProfileName(base_profiles[2])
refProfileName(base_profiles[3])
shiny::runApp()
df
input$inflation_margin
project_inflation(n_year, ans[[x]]$inc_rev_total, input$inflation_margin/100)
project_inflation(n_year, ans[[x]]$inc_rev_total, input$inflation_margin/100) %>% unlist()
shiny::runApp()
df
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
lapply(base_profiles, function(x) {x <- list()} )
base_profiles <- c("Robots","Retrofit","New")
lapply(base_profiles, function(x) {x <- list()} )
runApp()
runApp()
runApp()
x
x
x
runApp()
runApp()
runApp()
test1_val
c(test1_val)
Q
>>>>>>> Stashed changes
