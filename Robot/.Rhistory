shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
input$profile_choice
p
choices[p]
shiny::runApp('~/Documents/shiny/Robot')
input$milk_change
shiny::runApp('~/Documents/shiny/Robot')
p
p
shiny::runApp('~/Documents/shiny/Robot')
rp$milk_change
rp$pellets
rp$table_after_tax
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
rp$inc_rev_total
rp$inc_exp_total
rp$dec_exp_total
rp$inc_exp_herd_increase
rp$inc_exp_feed
rp$inc_exp_pellet
rp$inc_exp_record_management
rp$inc_exp_repair
rp$inc_exp_replacement
rp$inc_exp_utilities
rp$repair
rp$repair_total
rp$insurance_rate
input$insurance_rate
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$bw_wage_before_tax
rp$bw_wage_after_tax
rp$bw_wage_inflation_after_tax
rp$bw_wage_inflation_before_tax
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$milk_feed
rp$labor_repair
rp$capital
rp$misc
rp$inflation
rp$NAI
rp$bw_wage_after_tax
rp$net_annual_impact_after_tax
rp$net_annual_impact_before_tax
rp$tax_revenue_minus_expense
rp$tax_interest
rp$tax_depreciation
rp$adj_WACC_hurdle
rp$adj_WACC_interest
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
rp$table_before_tax_cash_flow[1,
]
rp$table_before_tax_cash_flow
rp$table_before_tax
rp$table_before_tax[1,]
rp$table_before_tax[1,] %>% round()
tbl
c(round(rp$table_before_tax[1,]))
round(rp$table_before_tax[1,])
round(rp$table_before_tax[1,]) %>% unlist
round(rp$table_before_tax[1,]) %>% unlist()
c(round(rp$table_before_tax[1,])) %>% unlist()
matrix(round(rp$table_before_tax[1,]), ncol=1)
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=matrix(round(rp$table_before_tax[1,]),ncol=1),
after.tax =matrix(round(rp$table_after_tax[1,]),ncol=1)
)
tbl
library(googleVis)
df <- data.frame(profile =c("A","B","C","D"),
var1 = c(1,2,2,1),
var2 = c(4,2,6,3))
gvisColumnChart(df, xvar="profile", yvar=c("var1","var2"),
options=list(isStacked=FALSE)) %>% plot()
df
gvisColumnChart(df, xvar="profile", yvar=c("var1","var2")) %>% plot()
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
tbl
tbl[,2]
tbl$before.tax
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=c(matrix(round(rp$table_before_tax[1,]),ncol=1)),
after.tax =c(matrix(round(rp$table_after_tax[1,]),ncol=1))
)
tbl
c(matrix(round(rp$table_before_tax[1,]),ncol=1))
round(rp$table_before_tax['Net Annual Impact',]
)
round(rp$table_before_tax['Net Annual Impact',])
data.frame(b=round(rp$table_before_tax['Net Annual Impact',]))
data.frame(b=as.matrix(round(rp$table_before_tax['Net Annual Impact',])))
as.integers(round(rp$table_before_tax['Net Annual Impact',]))
as.numeric(round(rp$table_before_tax['Net Annual Impact',]))
data.frame(b=as.numeric(round(rp$table_before_tax['Net Annual Impact',])))
tbl <- data.frame(
profile=c("Barn Only","Retrofit Parlors","New Parlors","Robots"),
before.tax=as.numeric(round(rp$table_before_tax[1,])),
after.tax =as.numeric(round(rp$table_after_tax[1,]))
)
tbl
tbl[,2]
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
paste("{title:Impact under",
robot_or_parlor(), "($)")
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
input$abc
a <- list
a$aa
a <- list()
a
a$a <-1
a
a$b
a$b %>% is.null()
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
rp$cost_milking
rp$cost_milking2
rp$cost_parlors
rp$cost_robot
shiny::runApp('~/Documents/shiny/Robot')
rp$cost_parlors
rp$cost_milking
shiny::runApp('~/Documents/shiny/Robot')
p
p
p
rp$cost_parlors
rp$cost_robot
rp$cost_robot
rp$cost_parlors
Q
shiny::runApp('~/Documents/shiny/Robot')
p
p
p
p
p
rp$cost_housing
rp$copy_cost_housing
rv$copy_cost_housing_pr4
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
install.packages('devtools')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
library(devtools)
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
input$cost_housing_cow
input$milk_change
input$hr_sv_milking
input$cost_robot
input$cost_parlors
input$milking_years
input$pellets
mins_production_change
length(mins_production_change)
length(steps_production_change)
length(varnames_production_change)
input$robot_parlor
input$profile_choice
input$milk_change
input$cost_housing_cow
input$cost_housing_cow_pr1
input$cost_housing_cow
input$hr_sv_milking
input$hr_sv_milking
input$cost_housing_cow
''
shiny::runApp('~/Documents/shiny/Robot')
x
x
x
input$x
input[[x]]
length(varnames_production_change)
i
varnames
length(varnames)
length(varnames)
input$milk_change
input$cost_housing_cow
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
tbl_robot
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
varnames
input[[varnames[n]]]
input[[varnames[1]]
]
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp('~/Documents/shiny/Robot')
Q
shiny::runApp('~/Documents/shiny/Robot')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input[[paste0("n_sets", x)]]
input[[paste0("useful_years",
x)]]
ans[[x]]$planning_horizon <- input[[paste0("n_sets", x)]] * input[[paste0("useful_years",
x)]]
input[[paste0("n_sets", x)]]
input[[paste0("useful_years",
+                                                                           x)]]
input[[paste0("useful_years",
+                                                                           x)]]input[[paste0("useful_years",
+                                                                           x)]]
input[[paste0("useful_years",
+                                                                           x)]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
ans[[x]]$salvage_milking_fv1
input[[paste0("salvage_milking1",
x)]]
input[[paste0("salvage_milking1",x)]]
shiny::runApp()
input[[paste0("salvage_milking1",x)]]
dep_robot
dep_housing
c(1:n_years)
ans[[x]]$housing_years
shiny::runApp()
ans[[x]]$loan_milking1
input$r_milking1
ans[[x]]$cost_milking
input[[paste0("cost_parlors",x)]]
dashboard
input[[paste0("n_robot",x)]]
input[[paste0("cost_robot",x)]]
input$n_robotRobots
x
shiny::runApp()
shiny::runApp()
ans[[x]]$loan_milking1
input$r_milking1
input[[paste0("n_yr_milking1", x)]]
n_years
shiny::runApp()
shiny::runApp()
ans[[x]]$salvage_milking_fv1
ans[[x]]$loan_milking1
input$r_milking1
input[[paste0("n_yr_milking1", x)]]
input[[paste0("r_milking1", x)]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
ans[[x]]$inc_rev_total
ans[[x]]$inc_exp_total
ans[[x]]$inc_exp_record_management
ans[[x]]$inc_exp_utilities
ans[[x]]$inc_exp_replacement
ans[[x]]$inc_exp_pellet
ans[[x]]$inc_exp_feed
ans[[x]]$inc_exp_repair
ans[[x]]$inc_exp_herd_increase
input$additional_labor
input$additional_cost
ans[[x]]$positive_total
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x
x
x
x
x
x
x
x
# http://www.excel-easy.com/examples/depreciation.html
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
debt_table <- function(loan, interest_rate, loan_period,
n_period, starting_year=1) {
loan_period <- round(loan_period,0)
n_period <- round(n_period,0)
starting_year <- round(starting_year,0)
pmt <- -pmt(interest_rate, loan_period, loan)
interest <- impt(interest_rate, 1, loan_period, loan)
principal <- pmt - interest
df <- data.frame(year=c(1:n_period), yr_pmt =rep(0,n_period))
ending_year <- loan_period + starting_year - 1
df$yr_pmt[starting_year:ending_year] <- c(1:loan_period)
df$interest <-  (df$yr_pmt >0) *
(-1) * impt(interest_rate, df$yr_pmt, loan_period, loan)
df$principal <- (df$yr_pmt >0) * (pmt - df$interest)
return(df)
}
# --- Common Excel Financial Functions  ---
# \url{http://cvs.moodle.org/contrib/patches/question_calculated_extended/calculated/packages/financial/financial_class.php?view=co}
# @author Enrique Garcia M. \email{egarcia@@egm.as}
# @author Karsten W. \email{k.weinert@@gmx.net}
npv <- function(rate, values) sum(values / (1 + rate)^seq_along(values))
irr <- function(x, start=0.1) {
t <- seq_along(x)-1
f <- function(i) abs(sum(x/(1+i)^t))
return(nlm(f,start)$estimate)
}
fv <- function(rate, nper, pmt, pv = 0.0, type = 0) {
pvif <- (1+rate)^nper # Present value interest factor
fvifa <- if(rate==0) nper else ((1+rate)^nper - 1) / rate
return(-((pv * pvif) + pmt * (1.0 + rate * type) * fvifa))
}
pv <- function(rate, nper, pmt, fv = 0.0, type = 0) {
pvif <- (1+rate)^nper # Present value interest factor
fvifa <- if(rate==0) nper else ((1+rate)^nper - 1) / rate
return((-fv - pmt * (1.0 + rate * type) * fvifa) / pvif)
}
pmt <- function(rate, nper, pv, fv=0, type=0) {
rr <- 1/(1+rate)^nper
res <- (-pv-fv*rr)*rate/(1-rr)
return(res/(1+rate*type))
}
# additional functions
mirr <- function(values, finance_rate, reinvest_rate) {
n <- length(values)
tmp <- npv(reinvest_rate,values)*(1+reinvest_rate)^n/
npv(finance_rate,values)*(1+finance_rate)
return(tmp^(1/(n-1))-1)
}
rate <- function(nper, pmt, pv) {
irr(c(pv,rep(pmt, nper)))
}
# annualized net present value
# need: library(dplyr) for %>% operation
anpv <- function(x, r, i, nper) {
x_seq <- lapply(c(1:nper), function(t) { x*(1+i)^(t-1) }) %>% unlist()
-pmt(r, nper, npv(r, x_seq))
}
# Used to bring anpv() back to the real term basis
deflator <- function(nper, i) {
nper/sum((1 + i)^(seq_along(c(1:nper)-1)))
}
# http://www.experts-exchange.com/articles/1948/A-Guide-to-the-PMT-FV-IPMT-and-PPMT-Functions.html
impt <- function(rate, per, nper, pv, fv=0, type=0) {
pmt <- pmt(rate, nper, pv, fv, type)
fv(rate, per-1, pmt, pv, type) * rate
}
zeros <- function(r,c) matrix(c(mat.or.vec(r,c)),nrow=r,ncol=c)
ones <- function(r,c) matrix(c(rep(1,r*c)),nrow=r,ncol=c)
nulls <- function(r,c) matrix(c(rep(NA,r*c)),nrow=r,ncol=c)
my_add_row <- function(A,a) {
# A: data.frame
# a: row vector that is going to be appended to A
A <- as.matrix(A)
A <- rbind(A,a)
data.frame(A)
}
formatcomma <- function(x, digits=NULL) {
if (length(x)==0) { return(NA) }
if (is.null(digits)) {
format(x, big.mark=",", scientific=FALSE)
} else {
format(round(x,digits), big.mark=",", scientific=FALSE)
}
}
formatdollar <- function(x,digit=0) {
#if (is.na(x)) { return(NA) }
if (length(x)==0) { return(NA) }
#if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("$",x %>% round(digit) %>% formatcomma())
} else {
paste0("-$",-x %>% round(digit) %>% formatcomma())
}
}
formatdollar2 <- function(x,digit=0) {
if (is.na(x)) { return(NA) }
if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("+$",x %>% round(digit) %>% formatcomma())
} else {
paste0("-$",-x %>% round(digit) %>% formatcomma())
}
}
formatdollar2b <- function(x,digit=0) {
if (is.na(x)) { return(NA) }
if (is.null(x)) { return(NA) }
if (x>=0) {
paste0("( +$",x %>% round(digit) %>% formatcomma()," )")
} else {
paste0("( -$",-x %>% round(digit) %>% formatcomma()," )")
}
}
df_null <- function(colnames) {
dummy <- matrix(rep(NA,length(colnames)),nrow=1)
colnames(dummy) <- colnames
empty_table <- data.frame(Column1 = numeric(0))
empty_table <- rbind(empty_table, dummy)[NULL,]
empty_table
}
## ---- Debt Table ---
# interest rate info
loan_robot_1 <- rv$robot_invest
loan_robot_2 <- rv$robot_invest*(1+input$inflation_robot)^input$robot_year
loan_period_robot <- round(input$robot_year*.8)
loan_housing <- rv$cost_housing
loan_period_housing <- round(rv$housing_year*.8)
tbl_robot <- debt_table(loan_robot_1, interest_rate, loan_period_robot, n_years , 1) +
+ debt_table(loan_robot_2, interest_rate, loan_period_robot, n_years, robot_year+1)
colnames(tbl_robot) <- lapply(colnames(tbl_robot), function(x) { paste0("robot_",x)}) %>% unlist()
tbl_barn <- debt_table(loan_housing, interest_rate, loan_period_housing, n_years, 1)
colnames(tbl_barn) <- lapply(colnames(tbl_barn), function(x) { paste0("barn_",x)}) %>% unlist()
table_debt <- cbind(tbl_robot, tbl_barn[,c(-1)])
table_debt$interest_total <- table_debt$robot_interest + table_debt$barn_interest
table_debt$principal_total <- table_debt$robot_principal + table_debt$barn_principal
cost_robot <- 360000
salvage_robot <- 45000
robot_year_AGDS <- 7
vdb(cost_robot, salvage_robot, robot_year_AGDS, factor=1.5, sequence=TRUE)
n_years <- 50;
c(rep(0,0),c(1:3))
shiny::runApp()
shiny::runApp()
x
x
x
x
x
x
x
x
shiny::runApp()
