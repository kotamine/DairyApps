x
x
runApp()
runApp()
ans[[paste0(x,"_da")]]$IOFC_cwt
input$milk_cow_day
ans[[x]]$IOFC
ans[[paste0(x,"_da")]]$IOFC
runApp()
runApp()
x
runApp()
runApp()
runApp()
runApp()
x
x
x
x
x
Q
runApp()
runApp()
runApp()
ans[[x]]$net_annual_impact_before_tax
runApp()
?Map
runApp()
runApp()
runApp()
lapply(c(100, 1000,10000), formatcomma)
lapply(c(100, 1000,10000), formatcomma) %>% unlist
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist
lapply(c(100, 1000,10000), formatcomma(dollar=TRUE)) %>% unlist
lapply(c(100, 1000,10000), formatcomma(), dollar=TRUE) %>% unlist
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist()
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist() [3]
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist()[3]
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist() -> a
a
a[3]
runApp()
runApp()
list("a"=1,"b"=2)
list("a"=1,"b a"=2)
list("a"=1,"b a"=2)[["b a"]]
runApp()
ans[[paste0(x,"_da")]]
ans[[paste0(x,"_da")]]()
runApp()
ans[[paste0(x,"_da")]]()[[input$NAI]]$NAI
ans[[paste0(x,"_da")]]()[['before tax']]$NAI
ans[[paste0(x,"_da")]]()[['after tax']]$NAI
sub("_"," ","before_tax")
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
Q
runApp()
Q
runApp()
runApp()
Q
runApp()
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({
browser()
# mat <- nulls(length(summary_table_vars), length(base_profiles))
#   rownames(mat) <- summary_table_varnames
#   colnames(mat) <- base_profiles
#   loc_NAI_split <- sub("_"," ",loc_NAI)
#
#   for (j in seq_along(base_profiles)) {
#     for (i in seq_along(summary_table_vars)) {
#       mat[i,j] <- ans[[paste0(base_profiles[j],"_da")]]()[[loc_NAI_split]][[summary_table_vars[i]]]
#     }
#   }
#
#   mat %>% data.frame()
NA
})
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({  })
ans[["Robots"]][[paste0("table_",loc_NAI)]] <- reactive({  })
ans[["sum"]]
ans[["Robots"]]
ans[["Robots"]]$herd_size
ans
abc <- reactive({  })
loc_NAI
ans[["abc"]]$herd_size
ans[[paste0("Robots","_da")]]
runApp()
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({ })
runApp()
ans[[paste0(x,"_da")]]
ans[["Robots"]]
ans[[paste0(x,"_da")]] <- reactive({
})
ans[[paste0(x)]] <- reactive({ })
ans[[paste0("abc")]] <- reactive({ })
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({ })
ans[[paste0("table_",loc_NAI)]] <- reactive({ })
ans[[paste0("table_",x)]] <- reactive({ })
ans[[paste0("table_")]] <- reactive({ })
ans[["table_"]] <- reactive({ })
ans[["table_"]][["a"]] <- reactive({ })
runApp()
runApp()
tbl
sum[["table_before_tax"]]()
mat
runApp()
runApp()
user_data
user_data$common_variables
user_data$profile_specific_variables
refProfileName(base_profiles)
lapply(base_profiles, refProfileName)
c("variable", unlist(lapply(base_profiles, refProfileName)))
runApp()
default_common_case_1
default_profile_specific_case_1
runApp()
runApp()
i
input[[paste0(rownames_2[1],base_profiles[1])]]
Q
runApp()
i
rownames_1[i]
user_data$common_variables[[rownames_1[i]]]
user_data$common_variables[[rownames_1[i],"value"]]
user_data$common_variables[rownames_1[i],"value"]
user_data$common_variables
user_data$common_variables[c("herd_size"),]
data1 <- user_data$common_variables
colnames(data1) <- user_data$common_variables[,"variable"]
rownames(data1) <- user_data$common_variables[,"variable"]
data1
data1["herd_size","value"]
data1["herd_size",]
data1["herd_size",2]
data1[1, 2]
data1
data1["value"]
data1["value"]$herd_size
data1["value"][1]
is.data.frame(user_data$common_variables)
user_data$common_variables[1,1]
str(user_data$common_variables)
?read.xlsx
default_common_case_1 <- read.xlsx("www/user_input_data_case_1.xlsx", sheetIndex = 1, stringAsFactors=FALSE)
default_common_case_1
default_common_case_1 <- read.xlsx("www/user_input_data_case_1.xlsx", sheetIndex = 1, stringsAsFactors=FALSE)
default_common_case_1
default_common_case_1["value"]
rownames(default_common_case_1) <- default_common_case_1["variable"]
rownames(default_common_case_1) <- default_common_case_1["variables"]
default_common_case_1["variable"]
rownames(default_common_case_1) <- default_common_case_1["variables"][]
rownames(default_common_case_1) <- default_common_case_1["variables"][,1]
default_common_case_1["variables"][,1]
default_common_case_1["variables"]
default_common_case_1["variable"]
default_common_case_1["variable"][]
default_common_case_1["variable"][,1]
rownames(default_common_case_1) <- default_common_case_1["variable"][,1]
default_common_case_1
default_common_case_1["herd_size","value"]
default_common_case_1["herd_size","value"] * 2
default_common_case_1["herd_size","value"] %>% as.numeric()
default_common_case_1[,1]
default_common_case_1["herd_size","value"]
runApp()
i
rownames_1[i]
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
user_data$common_variables[rownames_1[i],
"value"]
Q
runApp()
Q
runApp()
user_data$common_variables
runApp()
user_data$common_variables
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
rownames_1[i]
runApp()
runApp()
runApp()
cbind(c(1:n_years),dep_milking,dep_housing)
dep_milking
dep_housing
ans[[X]]$planning_horizon
yr_AGDS_housing*(input$dep_method=="d1")
yr_AGDS_milking
ans[[X]]$n_sets
input[[paste0("useful_years",x)]]
yr_AGDS_milking
runApp()
runApp()
runApp()
runApp()
i
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
rownames_1[i]
input$herd_size
i
i
input$herd_size
i
input$herd_size
rownames_1[i]
updateNumericInput(session, rownames_1[i], NULL, value = as.numeric(user_data$common_variables[rownames_1[i],
"value"]))
)
updateNumericInput(session, rownames_1[i], NULL, value = as.numeric(user_data$common_variables[rownames_1[i],
"value"]))
input$herd_size
as.numeric(user_data$common_variables[rownames_1[i],
+                                                                                                "value"]
)
as.numeric(user_data$common_variables[rownames_1[i],
+                                                                                                "value"])
as.numeric(user_data$common_variables[rownames_1[1], "value"])
as.numeric(user_data$common_variables[rownames_1[2], "value"])
as.numeric(user_data$common_variables[rownames_1[3], "value"])
shiny::runApp()
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
input$herd_size
runApp()
runApp()
runApp()
user_data$profile_specific_variables["n_sets", x_col]
paste0("n_sets",x)
input[["n_setsRobots"]]
as.character(2)
runApp()
input$salvage_milking1Robots
input$salvage_milking1New
input$salvage_milking1Retrofit
ans[["New"]]$salvage_milking_fv1
ans[["Retrofit"]]$salvage_milking_fv1
ans[["Retrofit"]]$salvage_housing_fv
ans[["New"]]$salvage_housing_fv
input$delay_housing1Robots
runApp()
input$salvage_milking1New
ans[["New]]$salvage_milking_fv1
""
ans[["New"]]$salvage_milking_fv1
ans[["New"]]$salvage_milking_fv1
ans[["New"]]$salvage_housing_fv
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
tbl
tbl
paste0("idx", j)
idx1
tbl <- data.frame(sen_vars = c("Baseline", sensitivity_labels),
before.tax = lapply(as.numeric(c(sum[["table_before_tax"]]()[base_name][1,
], sum[[paste0("sensitivity_table_before_tax", x)]]()[1,
])), round) %>% unlist(), after.tax = lapply(as.numeric(as.numeric(c(sum[["table_after_tax"]]()[base_name][1,
], sum[[paste0("sensitivity_table_after_tax", x)]]()[1,
]))), round) %>% unlist())
tbl
tbl[idx1,]
tbl[paste0("idx",j),]
tbl[paste0("idx1"),]
tbl[paste0(idx1),]
tbl[paste0(idx1),]
tbl[paste0(paste0("idx",1)),]
paste0("idx",1)
chartIdx <- list(c(1:5), c(6:10))
chartIdx
chartIdx <- list(c(1:5), c(6:10))
chartIdx[[1]]
chartIdx[[2]]
runApp()
j
tbl[chartIdx[[j]], ]
tbl[chartIdx[[2]], ]
runApp()
runApp()
runApp()
Q
runApp()
X
ans[[X]]$table_cash_flow[[paste(loc_var)]]
tmp_zerp
tmp_zero
X
ans[[X]]$table_cash_flow
ans[["Robots_se4"]]$table_cash_flow
ans[["Robots_se6"]]$table_cash_flow
ans[["Robots_se7"]]$table_cash_flow
ans[["Robots_se8"]]$table_cash_flow
ans[["Robots_se9"]]$table_cash_flow
ans[["Robots_se10"]]$table_cash_flow
sensitivity_vars
ans[[X]]$useful_years
ans[[X]]$table_cash_flow
ans[[X]]$table_debt
ans[[X]]$table_depreciation
ans[[X]]$planning_horizon
ans[[X]]$capital_recovery_milking
ans[[X]]$WACC
ans[[X]]$avg_interest
runApp()
table_depreciation
runApp()
runApp()
tbl_milking
debt_table(ans[[X]]$loan_milking2, ans[[X]]$r_milking1/100, input[[paste0("n_yr_milking1",x)]], n_years, ans[[X]]$useful_years+1)
ans[[X]]$useful_years
input[[paste0("n_yr_milking1",x)]]
input[[paste0("n_yr_milking1",x)]]
debt_table(ans[[X]]$loan_milking2, ans[[X]]$r_milking1/100, input[[paste0("n_yr_milking1",x)]], n_years, 3)
debt_table(ans[[X]]$loan_milking2, ans[[X]]$r_milking1/100, input[[paste0("n_yr_milking1",x)]], n_years, 5)
debt_table(ans[[X]]$loan_milking2, ans[[X]]$r_milking1/100, input[[paste0("n_yr_milking1",x)]], n_years, 7)
ans[[X]]$planning_horizon
runApp()
runApp()
Q
runApp()
vdb(ans[[X]]$cost_milking1, 0,
yr_AGDS_milking, factor=1.5, sequence=TRUE)
ans[[X]]$cost_milking1
yr_AGDS_milking
ans[[X]]$useful_years
runApp()
Q
vdb
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
vdb(1000,0,5)
vdb(1000,0,5,sequence=TRUE)
vdb(1000,0,1,sequence=TRUE)
vdb(1000,0,2,sequence=TRUE)
vdb(1000,0,3,sequence=TRUE)
vdb(1000,0,3,sequence=TRUE,factor=1.5)
vdb(1000,0,2,sequence=TRUE,factor=1.5)
vdb(1000,0,1,sequence=TRUE,factor=1.5)
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
if (nper>2) {
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
vdb(1000,0,1,sequence=TRUE,factor=1.5)
vdb(1000,0,2,sequence=TRUE,factor=1.5)
# http://www.excel-easy.com/examples/depreciation.html
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
if (nper>=2) {
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
vdb(1000,0,2,sequence=TRUE,factor=1.5)
vdb(1000,0,3,sequence=TRUE,factor=1.5)
vdb(1000,0,1,sequence=TRUE,factor=1.5)
vdb(1000,0,1,factor=1.5)
# http://www.excel-easy.com/examples/depreciation.html
vdb <- function(cost, salvage, nper, start_per=1, end_per=1, factor=2, switch=TRUE, sequence=FALSE) {
v <- c(); vsum <- c();
s0 <- (cost-salvage)/nper;  s <- s0
if (nper<= 0) {
return(NA)
} else if (nper<=1) {
v <- s0
} else {
tmp <- cost * factor/nper
v[1] <- (tmp>s) * tmp + (tmp<=s) * s
vsum <- v[1];
for (t in 2:nper) {
s <-  (cost - vsum[t-1] - salvage)/(nper - t + 1)
tmp <-  (cost - vsum[t-1]) * factor/nper
v[t] <- switch * ((tmp>s) * tmp + (tmp<=s) * s ) + (!switch) * tmp
vsum[t] <- vsum[t-1] + v[t]
}
}
if (!sequence)  {
return(sum(v[start_per:end_per]))
} else {
return(v)
}
}
vdb(1000,0,1,sequence=TRUE,factor=1.5)
vdb(1000,0,3,sequence=TRUE,factor=1.5)
vdb(1000,0,2,sequence=TRUE,factor=1.5)
runApp()
tbl2
c(1,chartIdx[[j]]+1)
c(1,chartIdx[[2]]+1)
tbl2[, c(1,chartIdx[[2]]+1)]
runApp()
tbl
runApp()
ans[[paste0(X,"_da_after_tax")]]
ans[[paste0(X,"_da_after_tax")]]
X
runApp()
ans[[X]]$NPV
table_depreciation
table_debt
table_cash_flow
debt_table(ans[[X]]$loan_housing, ans[[X]]$r_housing/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, 1/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, .01/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, .001/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, .00001/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, .000001/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
debt_table(ans[[X]]$loan_housing, .00000001/100, input[[paste0("n_yr_housing",x)]], n_years, 1)
1e-7
1e-7 * 1e7
1e-7 * 1e8
runApp()
''
runApp()
ans[[X]]$table_debt
ans[[X]]$table_cash_flow
ans[[X]]$capital_recovery_milking
ans[[X]]$capital_recovery_housing
-pmt(ans[[X]]$r_housing/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal)
-pmt(0/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
-pmt(0.0001/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
-pmt(0.000001/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
-pmt(0.0000001/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
-pmt(0.00000001/100, ans[[X]]$planning_horizon,
npv(ans[[X]]$r_housing/100,
ans[[X]]$table_debt$barn_interest+ans[[X]]$table_debt$barn_principal))
runApp()
cbind(mat_base, mat)
mat
mat %>% dim()
loc_NAI
mat
loc_NAI
mat %>% dim()
runApp()
runApp()
