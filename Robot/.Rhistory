CF_var_ending <- c("housing","milking1","milking2")
CF_vars <- lapply(CF_var_stem, function(stem) {
lapply(CF_var_ending, function(ending) {
paste0(stem,"_",ending)
})
}) %>% unlist()
?grepl
grep(CF_var_stem,CF_vars)
grep(CF_var_stem[1],CF_vars)
grep(CF_var_stem[1],CF_vars[1])
grep(CF_var_stem[1],CF_vars4)
grep(CF_var_stem[1],CF_vars[4])
grep(CF_var_stem[1],CF_vars[4]) *2
grep(CF_var_stem[1],CF_vars[4]) *2 %>% length()
formula_txt1 <-  paste("'WACC = (housing_loans / total_investment) * housing_interest +' , br(),
'(milking_system_loans / total_investment) * milking_interest +', br(),
'(downpayments / total_investment) * hurdle_rate', br(), ",
"'= (housing_loans * housing_interest +' , br(),
'milking_system_loans * milking_interest +' , br(),
'downpayments * hurdle_rate ) / total_investment)'")
formula_txt1
shiny::runApp()
runApp()
runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
Q
runApp()
runApp()
runApp()
runApp()
input$Navbar
input$partial_budget
runApp()
runApp()
input$Navbar
input$partial_budget
x
npv(ans[[x]]$WACC/100, table_breakeven[[paste0(x)]][-1]) +
+ table_breakeven[[paste0(x)]][1]
-pmt(ans[[x]]$WACC/100, n_years,ans[[x]]$npv_WACC[[paste0(x)]])
runApp()
runApp()
-pmt(ans[[x]]$WACC/100,
n_years, ans[[x]]$npv_WACC[[paste0(x)]])
runApp()
n_years
n_years
n_years
n_years
ans[[paste0(x,"_bw")]]$annuity_WACC[[paste0(x)]] <- -pmt(ans[[x]]$WACC/100, n_years,ans[[x]]$npv_WACC[[paste0(x)]])
-pmt(ans[[x]]$WACC/100, n_years,ans[[x]]$npv_WACC[[paste0(x)]])
n_years
ans[[x]]$npv_WACC
ans[[x]]$WACC/100
ans[[x]]$WACC
x
runApp()
runApp()
ans[[paste0(x,"_bw")]]$bw_wage_after_tax
runApp()
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
x
x
x
x
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
z
CF_render(formatcomma,0,dollar=TRUE)(z)
CF_render(formatcomma,0)
CF_render(formatcomma,0, dollar=TRUE)
a <- CF_render(formatcomma,0,dollar=TRUE)(z)
a
b<- CF_render(round_pct,3)(z)
b
CF_render(round_pct,3)
Q
runApp()
runApp()
z
ans[[x]]$copy2_loan_housing
ans[[x]]$herd_size
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ans[[x]]$net_annual_impact_after_tax
ans[[x]]$net_annual_impact_before_tax
ans[[x]]$tax_revenue_minus_expense
+ ans[[x]]$tax_interest
ans[[x]]$tax_depreciation
ans[[x]]$adj_WACC_interest
ans[[x]]$adj_WACC_hurdle
runApp()
runApp()
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
ans[[x]]$net_annual_impact_after_tax
length(ans[[x]]$net_annual_impact_after_tax)
need(length(ans[[x]]$net_annual_impact_after_tax) > 0) %>% validate()
runApp()
runApp()
ans[[x]]$net_annual_impact_after_tax
runApp()
input[[paste0("anticipated_hours_heat",x)]] + ans[[x]]$anticipated_hours_milking) *
input$labor_rate*365
(input[[paste0("anticipated_hours_heat",x)]] + ans[[x]]$anticipated_hours_milking) *
input$labor_rate*365
(input[[paste0("increase_rc_mgt",x)]] - input[[paste0("decrease_lab_mgt",x)]]) *
input$labor_rate_rc_mgt *365
input$additional_labor * input[[paste0("herd_increase",x)]]
input$additional_labor
input[[paste0("herd_increase",x)]]
tax_factor
runApp()
ans[[paste0(x,"_da")]]$IOFC
ans[[paste0(x,"_da")]]$IOFC2
dash_IOFC(ans[[paste0(x,"_da")]]$IOFC, ans[[paste0(x,"_da")]]$IOFC2, basis=input$IOFC)
input$IOFC
input$NAI
ans[[paste0(x,"_da")]]$NAI
ans[[paste0(x,"_da")]]$milk_feed
runApp()
input$IOFC
ans[[paste0(x,"_da")]]$inc_exp_repair
ans[[paste0(x,"_da")]]$labor_current
ans[[paste0(x,"_da")]]$labor_robot
ans[[paste0(x,"_da")]]$capital_recovery_robot2
ans[[paste0(x,"_da")]]$capital_recovery_housing2
ans[[paste0(x,"_da")]]$cost_downpayment
ans[[paste0(x,"_da")]]$robot_end_PV
ans[[paste0(x)]]$inc_exp_repair
ans[[paste0(x)]]$cost_downpayment
ans[[paste0(x)]]$robot_end_PV
ans[[paste0(x)]]$milking_end_PV
ans[[x]]$salvage_milking_PV
ans[[paste0(x,"_da")]]$capital_recovery_milking2
ans[[paste0(x,"_da")]]$capital_recovery_robot2
ans[[paste0(x,"_da")]]$misc
ans[[paste0(x,"_da")]]$inflation
ans[[paste0(x,"_da")]]$NAI - (ans[[paste0(x,"_da")]]$milk_feed
)
ans[[paste0(x,"_da")]]$labor_repair + ans[[paste0(x,"_da")]]$capital
ans[[x]]$inc_rev_total + ans[[x]]$dec_exp_total - ans[[x]]$inc_exp_total
ans[[x]]$planning_horizon
ans[[x]]$table_cash_flow$revenue_minus_expense[-1]
pmt(input$interest/100, ans[[x]]$planning_horizon,
npv(input$interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1]))
npv(input$interest/100, ans[[x]]$table_cash_flow$revenue_minus_expense[-1])
c("a","b") - "a"
a <- c("a","b")
a[a!="b"]
runApp()
input$IOFC
x
x
x
runApp()
runApp()
ans[[paste0(x,"_da")]]$IOFC_cwt
input$milk_cow_day
ans[[x]]$IOFC
ans[[paste0(x,"_da")]]$IOFC
runApp()
runApp()
x
runApp()
runApp()
runApp()
runApp()
x
x
x
x
x
Q
runApp()
runApp()
runApp()
ans[[x]]$net_annual_impact_before_tax
runApp()
?Map
runApp()
runApp()
runApp()
lapply(c(100, 1000,10000), formatcomma)
lapply(c(100, 1000,10000), formatcomma) %>% unlist
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist
lapply(c(100, 1000,10000), formatcomma(dollar=TRUE)) %>% unlist
lapply(c(100, 1000,10000), formatcomma(), dollar=TRUE) %>% unlist
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist()
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist() [3]
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist()[3]
lapply(c(100, 1000,10000), formatcomma, dollar=TRUE) %>% unlist() -> a
a
a[3]
runApp()
runApp()
list("a"=1,"b"=2)
list("a"=1,"b a"=2)
list("a"=1,"b a"=2)[["b a"]]
runApp()
ans[[paste0(x,"_da")]]
ans[[paste0(x,"_da")]]()
runApp()
ans[[paste0(x,"_da")]]()[[input$NAI]]$NAI
ans[[paste0(x,"_da")]]()[['before tax']]$NAI
ans[[paste0(x,"_da")]]()[['after tax']]$NAI
sub("_"," ","before_tax")
runApp()
runApp()
runApp()
Q
runApp()
runApp()
runApp()
runApp()
Q
runApp()
Q
runApp()
runApp()
Q
runApp()
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({
browser()
# mat <- nulls(length(summary_table_vars), length(base_profiles))
#   rownames(mat) <- summary_table_varnames
#   colnames(mat) <- base_profiles
#   loc_NAI_split <- sub("_"," ",loc_NAI)
#
#   for (j in seq_along(base_profiles)) {
#     for (i in seq_along(summary_table_vars)) {
#       mat[i,j] <- ans[[paste0(base_profiles[j],"_da")]]()[[loc_NAI_split]][[summary_table_vars[i]]]
#     }
#   }
#
#   mat %>% data.frame()
NA
})
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({  })
ans[["Robots"]][[paste0("table_",loc_NAI)]] <- reactive({  })
ans[["sum"]]
ans[["Robots"]]
ans[["Robots"]]$herd_size
ans
abc <- reactive({  })
loc_NAI
ans[["abc"]]$herd_size
ans[[paste0("Robots","_da")]]
runApp()
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({ })
runApp()
ans[[paste0(x,"_da")]]
ans[["Robots"]]
ans[[paste0(x,"_da")]] <- reactive({
})
ans[[paste0(x)]] <- reactive({ })
ans[[paste0("abc")]] <- reactive({ })
ans[["sum"]][[paste0("table_",loc_NAI)]] <- reactive({ })
ans[[paste0("table_",loc_NAI)]] <- reactive({ })
ans[[paste0("table_",x)]] <- reactive({ })
ans[[paste0("table_")]] <- reactive({ })
ans[["table_"]] <- reactive({ })
ans[["table_"]][["a"]] <- reactive({ })
runApp()
runApp()
tbl
sum[["table_before_tax"]]()
mat
runApp()
runApp()
user_data
user_data$common_variables
user_data$profile_specific_variables
refProfileName(base_profiles)
lapply(base_profiles, refProfileName)
c("variable", unlist(lapply(base_profiles, refProfileName)))
runApp()
default_common_case_1
default_profile_specific_case_1
runApp()
runApp()
i
input[[paste0(rownames_2[1],base_profiles[1])]]
Q
runApp()
i
rownames_1[i]
user_data$common_variables[[rownames_1[i]]]
user_data$common_variables[[rownames_1[i],"value"]]
user_data$common_variables[rownames_1[i],"value"]
user_data$common_variables
user_data$common_variables[c("herd_size"),]
data1 <- user_data$common_variables
colnames(data1) <- user_data$common_variables[,"variable"]
rownames(data1) <- user_data$common_variables[,"variable"]
data1
data1["herd_size","value"]
data1["herd_size",]
data1["herd_size",2]
data1[1, 2]
data1
data1["value"]
data1["value"]$herd_size
data1["value"][1]
is.data.frame(user_data$common_variables)
user_data$common_variables[1,1]
str(user_data$common_variables)
?read.xlsx
default_common_case_1 <- read.xlsx("www/user_input_data_case_1.xlsx", sheetIndex = 1, stringAsFactors=FALSE)
default_common_case_1
default_common_case_1 <- read.xlsx("www/user_input_data_case_1.xlsx", sheetIndex = 1, stringsAsFactors=FALSE)
default_common_case_1
default_common_case_1["value"]
rownames(default_common_case_1) <- default_common_case_1["variable"]
rownames(default_common_case_1) <- default_common_case_1["variables"]
default_common_case_1["variable"]
rownames(default_common_case_1) <- default_common_case_1["variables"][]
rownames(default_common_case_1) <- default_common_case_1["variables"][,1]
default_common_case_1["variables"][,1]
default_common_case_1["variables"]
default_common_case_1["variable"]
default_common_case_1["variable"][]
default_common_case_1["variable"][,1]
rownames(default_common_case_1) <- default_common_case_1["variable"][,1]
default_common_case_1
default_common_case_1["herd_size","value"]
default_common_case_1["herd_size","value"] * 2
default_common_case_1["herd_size","value"] %>% as.numeric()
default_common_case_1[,1]
default_common_case_1["herd_size","value"]
runApp()
i
rownames_1[i]
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
user_data$common_variables[rownames_1[i],
"value"]
Q
runApp()
Q
runApp()
user_data$common_variables
runApp()
user_data$common_variables
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
rownames_1[i]
runApp()
runApp()
runApp()
cbind(c(1:n_years),dep_milking,dep_housing)
dep_milking
dep_housing
ans[[X]]$planning_horizon
yr_AGDS_housing*(input$dep_method=="d1")
yr_AGDS_milking
ans[[X]]$n_sets
input[[paste0("useful_years",x)]]
yr_AGDS_milking
runApp()
runApp()
runApp()
runApp()
i
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
rownames_1[i]
input$herd_size
i
i
input$herd_size
i
input$herd_size
rownames_1[i]
updateNumericInput(session, rownames_1[i], NULL, value = as.numeric(user_data$common_variables[rownames_1[i],
"value"]))
)
updateNumericInput(session, rownames_1[i], NULL, value = as.numeric(user_data$common_variables[rownames_1[i],
"value"]))
input$herd_size
as.numeric(user_data$common_variables[rownames_1[i],
+                                                                                                "value"]
)
as.numeric(user_data$common_variables[rownames_1[i],
+                                                                                                "value"])
as.numeric(user_data$common_variables[rownames_1[1], "value"])
as.numeric(user_data$common_variables[rownames_1[2], "value"])
as.numeric(user_data$common_variables[rownames_1[3], "value"])
shiny::runApp()
as.numeric(user_data$common_variables[rownames_1[i],
"value"])
input$herd_size
runApp()
runApp()
runApp()
user_data$profile_specific_variables["n_sets", x_col]
paste0("n_sets",x)
input[["n_setsRobots"]]
as.character(2)
runApp()
input$salvage_milking1Robots
input$salvage_milking1New
input$salvage_milking1Retrofit
ans[["New"]]$salvage_milking_fv1
ans[["Retrofit"]]$salvage_milking_fv1
ans[["Retrofit"]]$salvage_housing_fv
ans[["New"]]$salvage_housing_fv
input$delay_housing1Robots
runApp()
input$salvage_milking1New
ans[["New]]$salvage_milking_fv1
""
ans[["New"]]$salvage_milking_fv1
ans[["New"]]$salvage_milking_fv1
ans[["New"]]$salvage_housing_fv
runApp()
runApp()
